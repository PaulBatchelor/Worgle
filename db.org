#+TITLE: Worgle Database
* Worgle Database
This section outlines the portion of Worgle which handles
database export.
The main idea behind this is to be able to take a program
Org, and export all the metadata into a SQLite database. In
the future, other programs will be written to query the
generated database and dynamically display portions of the
program in interesting ways.
** Worgle Database Top
*** Top-level files
The worgle database interface generates a single C and header file.
#+NAME: db-top
#+BEGIN_SRC c :tangle db.c
#include <stdio.h>
#include <sqlite3.h>
#include "worgle.h"
#include "worgle_private.h"
#include "db.h"
<<static_db_functions>>
<<functions>>
#+END_SRC
#+NAME: db-header
#+BEGIN_SRC c :tangle db.h
#ifndef WORGLE_DB_H
#define WORGLE_DB_H
<<macros>>
<<function_declarations>>
#endif
#+END_SRC
*** Top-level functions
**** Insert Schemas
The initial worgle schemas are created inside the database
using the function =worgle_db_schemas=. This *must* be
called before attempting to do anything else, and it
should only be called once.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_schemas(worgle_d *worg, sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_schemas(worgle_d *worg, sqlite3 *db)
{
    <<schemas>>
}
#+END_SRC
**** Insert Tangled Data
When worgle is done parsing data, the tangled data is
written to the database using the funtion
=worgle_db_tangle=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_tangle(worgle_d *worg, sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_tangle(worgle_d *worg, sqlite3 *db)
{
    <<inserts>>
}
#+END_SRC
** SQLite Table Schemas
The following section describes the SQLite schemas for all the tables
needed by Worgle.
*** Segment Schema
The segment schema contains the following items:

- the UUID
- the type (stored as integer)
- the line number
- the text itself (stored as text)
- the file (filename, not UUID) that it belongs to
- the UUID of the next segment

The types for segments are defined in an ENUM.

#+NAME: macros
#+BEGIN_SRC c
enum {
    SEGMENT_STRING,
    SEGMENT_REFERENCE
};
#+END_SRC

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE segments(\n"
             "id INTEGER PRIMARY KEY,\n"
             "type INTEGER,\n"
             "str TEXT,\n"
             "linum INTEGER,\n"
             "filename TEXT,\n"
             "next_segment INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** Block Schema
The block schema contains the following items:

- the UUID
- the UUID of the segment head
- the name of the block

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE blocks("
             "id INTEGER PRIMARY KEY,\n"
             "head_segment INTEGER,\n"
             "name TEXT\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** File Schema
A file name table contains the following:

- UUID
- filename
- the top-level block
- the UUID for the next file (0 if there is no next file)

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE files(\n"
             "id INTEGER PRIMARY KEY,\n"
             "filename TEXT,\n"
             "top INTEGER,\n"
             "next_file INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** Resource Schema
Every single UUID is logged into a single table. This table has every single
UUID and their type.

- UUID
- type (as an integer)

The integer-based types are defined as enums below:

#+NAME: macros
#+BEGIN_SRC c
enum {
    RES_FILE,
    RES_BLOCK,
    RES_SEGMENT,
    RES_HEADER
};
#+END_SRC

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE resources(\n"
             "id INTEGER PRIMARY KEY,\n"
             "type INTEGER,\n"
             "typename TEXT\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC

This operation happens so often that there is a function for it called
=insert_resource=.

#+NAME: static_db_functions
#+BEGIN_SRC c
static void insert_resource(sqlite3 *db, worgle_long id, int type)
{
    sqlite3_stmt *stmt;
    int rc;

    sqlite3_prepare_v2(db,
                       "INSERT INTO resources"
                       "(id, type, typename)\n"
                       "VALUES(?1,?2,?3);",
                       -1,
                       &stmt,
                       NULL);

    sqlite3_bind_int(stmt, 1, id);
    sqlite3_bind_int(stmt, 2, type);
    switch(type) {
        case RES_SEGMENT:
            sqlite3_bind_text(stmt, 3, "Segment", -1, NULL);
            break;
        case RES_BLOCK:
            sqlite3_bind_text(stmt, 3, "Block", -1, NULL);
            break;
        case RES_FILE:
            sqlite3_bind_text(stmt, 3, "File", -1, NULL);
            break;
        default:
            sqlite3_bind_text(stmt, 3, "Unknown", -1, NULL);
            break;
    }

    rc = sqlite3_step(stmt);

    if(rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
}
#+END_SRC
*** DONE Header Schema
CLOSED: [2019-09-12 Thu 08:44]
The header schema contains the following:
- UUID(?)
- Section Number (as a string)
- Section Name
- Level
- Org File Name
- Line Number
#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE headers(\n"
             "id INTEGER PRIMARY KEY,\n"
             "section TEXT,\n"
             "level INTEGER,\n"
             "name TEXT,\n"
             "filename TEXT,\n"
             "linum INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** TODO Content Schema
Hopefully, it will be:
- UUID(?)
- Section Location (as a string)
- Starting Line Number
- File name
- Content
*** TODO Block Position
This provides information about a particular Block position,
but not the content itself.
This includes:
- UUID
- Section Number

This is a separate section from the =blocks= section, for
two reasons. One, because the section number is only derived
while it is being parsed. Two, to more cleanly separate the
woven content from the tangled content.
** SQLite Insert Statements
This section pertains to the actual SQLite insert statements
that occur.
Generally speaking, data in Worgle can be broken up into
two perspectives: tangled data (the generated code for the
compiler), and woven data (the markup and semantics).
*** SQLite Woven Data
Unlike Tangled data, woven data is inserted while the file
is being parsed. As a result of this, the functionality is
split up amongst a few functions instead of having one
top-level function.
**** DONE Top-level Weave Insert
CLOSED: [2019-09-12 Thu 08:55]
Entry point for inserting woven data are the org file lists.
#+NAME: inserts
#+BEGIN_SRC c
worgle_db_insert_orglist(worg, db);
#+END_SRC
**** TODO Org Filelist Insert
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_orglist(worgle_d *worg, sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_orglist(worgle_d *worg, sqlite3 *db)
{
    worgle_orgfile *orgs;
    worgle_textbuf *txt;
    int n;

    orgs = worg->orgs;
    txt = worg->buffers;

    for(n = 0; n < worg->nbuffers; n++) {
        worgle_db_insert_orgfile(worg,
                                 &orgs[n],
                                 &txt[n].filename,
                                 db);
    }
}
#+END_SRC
**** TODO Org File Insert
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_orgfile(worgle_d *worg,
                              worgle_orgfile *f,
                              worgle_string *filename,
                              sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_orgfile(worgle_d *worg,
                              worgle_orgfile *f,
                              worgle_string *filename,
                              sqlite3 *db)
{
    size_t n;
    worgle_orglet *o;
    worgle_orglet *nxt;
    int curlvl;
    int counter[10];
    char strbuf[256];

    if (f->size <= 0) return;

    curlvl = 0;
    o = f->head;
    for (n = 0; n < f->size; n++) {
        nxt = o->next;
        switch (o->type) {
            case 0: /* Header */
                worgle_db_insert_header(worg,
                                        o,
                                        filename,
                                        &curlvl,
                                        counter,
                                        strbuf,
                                        db);
                break;
        }
        o = nxt;
    }
}
#+END_SRC
**** TODO Header Insert
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_header(worgle_d *worg,
                             worgle_orglet *o,
                             worgle_string *fname,
                             int *curlvl,
                             int *counter,
                             char *strbuf,
                             sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_header(worgle_d *worg,
                             worgle_orglet *o,
                             worgle_string *fname,
                             int *curlvl,
                             int *counter,
                             char *strbuf,
                             sqlite3 *db)
{
    worgle_orglet_header *h;
    int diff;
    int n;
    int bufpos;

    h = o->ud;
    printf("filename: ");
    worgle_string_write(stdout, fname);
    printf("\n");
    printf("header: ");
    worgle_string_write(stdout, &h->str);
    printf("\n");

    if(*curlvl <= 0) *curlvl = 1;

    if (h->lvl > *curlvl) {
        diff = h->lvl - *curlvl;
        for (n = 1; n <= diff; n++) {
            counter[(*curlvl + n) - 1] = 0;
        }
    }

    counter[h->lvl - 1]++;

    bufpos = 0;
    for(n = 0; n < h->lvl; n++) {
        bufpos += sprintf(&strbuf[bufpos], "%d.", counter[n]);
    }
    printf("section: %s\n", strbuf);
    *curlvl = h->lvl;
}
#+END_SRC
**** TODO Content Insert
Anything in between a header and the start of a code block
is considered to be "content". Any time a new header or
codeblock is started, this function will be inserted
**** TODO Block (Position) Insert
Any time a block is started, a note of the position it is in
is stored as metadata. This will include the section, as
well as line number and filename.
*** SQLite Tangled Data
The way Worgle generates data is by recursively iterating
through the file list. The SQLite table will be populated
in the same way.
**** Top-level tangle insert
Table population tangle insert is done inside the function
=worgle_db_generate=.

#+NAME: inserts
#+BEGIN_SRC c
worgle_db_insert_filelist(worg, &worg->flist, db);
#+END_SRC
**** Filelist Insert
The top-level part of the code walks through the file list inside of
=worgle_db_insert_filelist=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_filelist(worgle_d *worg,
                               worgle_filelist *flist,
                               sqlite3 *db);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_filelist(worgle_d *worg,
                               worgle_filelist *flist,
                               sqlite3 *db)
{
    worgle_file *f;
    int n;

    f = flist->head;
    for(n = 0; n < flist->nfiles; n++) {
        worgle_db_insert_file(worg, f, db);
        f = f->nxt;
    }
}
#+END_SRC
**** File Insert
A file is inserted with the function =worgle_db_insert_file=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_file(worgle_d *worg,
                           worgle_file *file,
                           sqlite3 *db);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_file(worgle_d *worg,
                           worgle_file *file,
                           sqlite3 *db)
{
    worgle_long next_id;
    sqlite3_stmt *stmt;
    worgle_string *filename;
    int rc;

    if(file->nxt == NULL) next_id = 0;
    else next_id = file->nxt->id;

    sqlite3_prepare_v2(db,
                       "INSERT INTO files"
                       "(id, next_file, filename, top)"
                       "VALUES(?1, ?2, ?3, ?4);",
                       -1,
                       &stmt,
                       NULL);


    sqlite3_bind_int(stmt, 1, file->id);
    sqlite3_bind_int(stmt, 2, next_id);

    filename = &file->filename;
    sqlite3_bind_text(stmt, 3,
                      filename->str, filename->size,
                      NULL);

    sqlite3_bind_int(stmt, 4, file->top->id);

    rc = sqlite3_step(stmt);

    if(rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
    insert_resource(db, file->id, RES_FILE);
    worgle_db_insert_block(worg, file->top, db);
}
#+END_SRC
**** Block Insert
A block is inserted with the function =worgle_db_insert_block=.
#+NAME:function_declarations
#+BEGIN_SRC c
void worgle_db_insert_block(worgle_d *worg,
                            worgle_block *block,
                            sqlite3 *db);
#+END_SRC

#+NAME:functions
#+BEGIN_SRC c
void worgle_db_insert_block(worgle_d *worg,
                            worgle_block *block,
                            sqlite3 *db)
{
    worgle_segment *s;
    int n;
    worgle_long next_segment;
    worgle_block *blk;
    worgle_hashmap *hm;
    sqlite3_stmt *stmt;
    worgle_string *name;
    int rc;

    s = block->head;
    hm = &worg->dict;

    sqlite3_prepare_v2(db,
                       "INSERT INTO blocks"
                       "(id,"
                       "head_segment,"
                       "name)\n"
                       "VALUES(?1, ?2, ?3);",
                       -1,
                       &stmt,
                       NULL);
    sqlite3_bind_int(stmt, 1, block->id);
    sqlite3_bind_int(stmt, 2, block->head->id);

    name = &block->name;
    sqlite3_bind_text(stmt, 3,
                      name->str, name->size,
                      NULL);
    rc = sqlite3_step(stmt);

    if(rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
        return;
    }

    sqlite3_finalize(stmt);

    insert_resource(db, block->id, RES_BLOCK);
    for(n = 0; n < block->nsegs; n++) {
        sqlite3_prepare_v2(db,
                        "INSERT INTO segments"
                        "(id,"
                        "type,"
                        "linum,"
                        "next_segment,"
                        "str,"
                        "filename)\n"
                        "VALUES(?1, ?2, ?3, ?4, ?5, ?6);",
                        -1,
                        &stmt,
                        NULL);
        if(s->nxt != NULL) next_segment = s->nxt->id;
        else next_segment = 0;
        sqlite3_bind_int(stmt, 1, s->id);
        sqlite3_bind_int(stmt, 2, s->type);
        sqlite3_bind_int(stmt, 3, s->linum);
        sqlite3_bind_int(stmt, 4, next_segment);

        sqlite3_bind_text(stmt, 5,
                        s->str.str, s->str.size,
                        NULL);
        sqlite3_bind_text(stmt, 6,
                        s->filename->str, s->filename->size,
                        NULL);
        if(rc != SQLITE_DONE) {
            fprintf(stderr,
                    "SQLite error: %s\n",
                    sqlite3_errmsg(db));
        }

        rc = sqlite3_step(stmt);

        if(rc != SQLITE_DONE) {
            fprintf(stderr,
                    "SQLite error: %s\n",
                    sqlite3_errmsg(db));
        }
        sqlite3_finalize(stmt);
        insert_resource(db, s->id, RES_SEGMENT);
        if(worgle_segment_is_reference(s)) {
            if(!worgle_hashmap_find(hm, &s->str, &blk)) break;
            worgle_db_insert_block(worg, blk, db);
        }
        s = s->nxt;
    }
}
#+END_SRC
