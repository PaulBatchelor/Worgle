#+TITLE: Worgle Database
* Worgle Database (WIP)
This section outlines the portion of Worgle which handles database
export. At the time of writing, this feature does not exist yet.
The main idea behind this is to be able to take a program Org, and
export all the metadata into a SQLite database. In the future, other
programs will be written to query the generated database and dynamically
display portions of the program in interesting ways.

Instead of using the SQLite API to generate the database directly, the Worgle
database interface will write SQL INSERT statements to be read by the sqlite3
command line interface.
** Worgle Database Top
*** Top-level files
The worgle database interface generates a single C and header file.

# functions and function_declarations correspond to the main worgle.org file

#+NAME: db-top
#+BEGIN_SRC c :tangle db.c
#include <stdio.h>
#include "worgle.h"
#include "db.h"
<<functions>>
#+END_SRC
#+NAME: db-header
#+BEGIN_SRC c :tangle db.h
#ifndef WORGLE_DB_H
#define WORGLE_DB_H
<<function_declarations>>
#endif
#+END_SRC
*** Top-level function
The SQLite database generation is done with the function =worgle_db_generate=.
It will write SQLite commands to a file handle =fp=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_generate(worgle_d *worg, FILE *fp);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_generate(worgle_d *worg, FILE *fp)
{

}
#+END_SRC
** SQLite Schemas
The following section describes the SQLite schemas for all the tables
needed by Worgle.
*** Segment Schema
The segment schema contains the following items:

- the UUID
- the type (stored as integer)
- the line number
- the file (filename, not UUID) that it belongs to
- the UUID of the next segment
*** Block Schema
The block schema contains the following items:

- the UUID
- the UUID of the head
- the name of the block
- the UUID of the next block
*** File Schema
A file name table contains the following:

- UUID
- filename
- the top-level block
- the UUID for the next file (0 if there is no next file)
