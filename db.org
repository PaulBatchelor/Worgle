#+TITLE: Worgle Database
* Worgle Database (WIP)
This section outlines the portion of Worgle which handles database
export.
The main idea behind this is to be able to take a program Org, and
export all the metadata into a SQLite database. In the future, other
programs will be written to query the generated database and dynamically
display portions of the program in interesting ways.
** Worgle Database Top
*** Top-level files
The worgle database interface generates a single C and header file.
#+NAME: db-top
#+BEGIN_SRC c :tangle db.c
#include <stdio.h>
#include <sqlite3.h>
#include "worgle.h"
#include "worgle_private.h"
#include "db.h"
<<macros>>
<<static_db_functions>>
<<functions>>
#+END_SRC
#+NAME: db-header
#+BEGIN_SRC c :tangle db.h
#ifndef WORGLE_DB_H
#define WORGLE_DB_H
<<function_declarations>>
#endif
#+END_SRC
*** Top-level function
The SQLite database generation is done with the function
=worgle_db_generate=. It will write SQLite commands to a
SQLite database handle.
# <2019-06-15 Sat> At the moment, this is being refactored
# to use the SQLite API, pardon our appearance.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_generate(worgle_d *worg, sqlite3 *db);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_generate(worgle_d *worg, sqlite3 *db)
{
    <<schemas>>
/*
    <<inserts>>
*/
}
#+END_SRC
** SQLite Table Schemas
The following section describes the SQLite schemas for all the tables
needed by Worgle.
*** Segment Schema
The segment schema contains the following items:

- the UUID
- the type (stored as integer)
- the line number
- the file (filename, not UUID) that it belongs to
- the UUID of the next segment

The types for segments are defined in an ENUM.

#+NAME: macros
#+BEGIN_SRC c
enum {
    SEGMENT_STRING,
    SEGMENT_REFERENCE
};
#+END_SRC

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE segments(\n"
             "id INTEGER PRIMARY KEY,\n"
             "type INTEGER,\n"
             "str INTEGER,\n"
             "linum INTEGER,\n"
             "filename TEXT,\n"
             "next_segment INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** Block Schema
The block schema contains the following items:

- the UUID
- the UUID of the segment head
- the name of the block
- the UUID of the next block

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE blocks("
             "id INTEGER PRIMARY KEY,\n"
             "head_segment INTEGER,\n"
             "name TEXT,\n"
             "next_block INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** File Schema
A file name table contains the following:

- UUID
- filename
- the top-level block
- the UUID for the next file (0 if there is no next file)

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE files(\n"
             "id INTEGER PRIMARY KEY,\n"
             "filename TEXT,\n"
             "type INTEGER,\n"
             "next_file INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
*** UUID Schema
Every single UUID is logged into a single table. This table has every single
UUID and their type.

- UUID
- type (as an integer)

The integer-based types are defined as enums below:

#+NAME: macros
#+BEGIN_SRC c
enum {
    RES_FILE,
    RES_BLOCK,
    RES_SEGMENT
};
#+END_SRC

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE resources(\n"
             "id INTEGER PRIMARY KEY,\n"
             "type INTEGER,\n"
             "typename TEXT\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC

This operation happens so often that there is a function for it called
=insert_resource=.

#+NAME: static_db_functions
#+BEGIN_SRC c
static void insert_resource(sqlite3 *db, worgle_long id, int type)
{
    sqlite3_stmt *stmt;
    int rc;

    sqlite3_prepare_v2(db,
                       "INSERT INTO resources"
                       "(id, type, typename)\n"
                       "VALUES(?1,?2,?3);", 
                       -1,
                       &stmt,
                       NULL);

    sqlite3_bind_int(stmt, 1, id);
    sqlite3_bind_int(stmt, 2, type);
    switch(type) {
        case RES_SEGMENT:
            sqlite3_bind_text(stmt, 3, "Segment", -1, NULL);
            break;
        case RES_BLOCK:
            sqlite3_bind_text(stmt, 3, "Block", -1, NULL);
            break;
        case RES_FILE:
            sqlite3_bind_text(stmt, 3, "File", -1, NULL);
            break;
        default:
            sqlite3_bind_text(stmt, 3, "Unknown", -1, NULL);
            break;
    }

    rc = sqlite3_step(stmt);

    if(rc) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
}
#+END_SRC
** SQLite Insert Statements
This section pertains to the actual SQLite insert statements that occur.
Generally speaking, data in Worgle can be broken up into two perspectives:
tangled data (the generated code for the compiler), and
woven data (the markup and semantics).
*** SQLite Tangled Data
The way Worgle generates data is by recursively iterating through the file list.
The SQLite table will be populated in the same way.
**** Top-level tangle insert
Table population tangle insert is done inside the function =worgle_db_generate=.

#+NAME: inserts
#+BEGIN_SRC c
worgle_db_insert_filelist(worg, &worg->flist, fp);
#+END_SRC
**** Filelist Insert
The top-level part of the code walks through the file list inside of
=worgle_db_insert_filelist=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_filelist(worgle_d *worg, worgle_filelist *flist, FILE *fp);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_filelist(worgle_d *worg, worgle_filelist *flist, FILE *fp)
{
    worgle_file *f;
    int n;

    f = flist->head;
    for(n = 0; n < flist->nfiles; n++) {
        worgle_db_insert_file(worg, f, fp);
        f = f->nxt;
    }
}
#+END_SRC
**** File Insert
A file is inserted with the function =worgle_db_insert_file=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_file(worgle_d *worg, worgle_file *file, FILE *fp);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_file(worgle_d *worg, worgle_file *file, FILE *fp)
{
    worgle_long next_id;

    if(file->nxt == NULL) next_id = 0;
    else next_id = file->nxt->id;
    fprintf(fp, "INSERT INTO file(id, next_file, filename)\n");
    fprintf(fp, "VALUES(%lu, %lu, ",
            file->id,
            next_id);
    fprintf(fp, "\"");
    worgle_string_write(fp, &file->filename);
    fprintf(fp, "\");\n");
    insert_resource(fp, file->id, RES_FILE);
    worgle_db_insert_block(worg, file->top, fp);
}
#+END_SRC
**** Block Insert
A block is inserted with the function =worgle_db_insert_block=.
#+NAME:function_declarations
#+BEGIN_SRC c
void worgle_db_insert_block(worgle_d *worg, worgle_block *block, FILE *fp);
#+END_SRC

#+NAME:functions
#+BEGIN_SRC c
static void print_escaped_string(FILE *fp, worgle_string *str)
{
    size_t s;
    for(s = 0; s < str->size; s++) {
        switch(str->str[s]) {
            case '\'':
                fprintf(fp, "''");
                break;
            default:
                fputc(str->str[s], fp);
                break;
        }
    }
}
void worgle_db_insert_block(worgle_d *worg, worgle_block *block, FILE *fp)
{
    worgle_segment *s;
    int n;
    worgle_long next_segment;
    worgle_block *blk;
    worgle_hashmap *hm;
    worgle_long next_id;

    s = block->head;
    hm = &worg->dict;
    fprintf(fp, "INSERT INTO block(id, head_segment, next_block, name)\n");
    if(block->nxt == NULL) {
        next_id = 0;
    } else {
        next_id = block->nxt->id;
    }
    fprintf(fp, "VALUES(%lu, %lu, %lu, ",
            block->id,
            block->head->id,
            next_id);
    fprintf(fp, "'");
    worgle_string_write(fp, &block->name);
    fprintf(fp, "');\n");
    insert_resource(fp, block->id, RES_BLOCK);
    for(n = 0; n < block->nsegs; n++) {
        fprintf(fp, "INSERT INTO segments");
        fprintf(fp, "(id, type, linum, next_segment, str) VALUES\n");
        if(s->nxt != NULL) next_segment = s->nxt->id;
        else next_segment = 0;
        fprintf(fp, "(%lu, %d, %lu, %lu, ",
                s->id,
                s->type,
                s->linum,
                next_segment);
        fprintf(fp, "'");
        print_escaped_string(fp, &s->str);
        /* worgle_string_write(fp, &s->str); */
        fprintf(fp, "');\n");
        insert_resource(fp, s->id, RES_SEGMENT);
        if(worgle_segment_is_reference(s)) {
            if(!worgle_hashmap_find(hm, &s->str, &blk)) break;
            worgle_db_insert_block(worg, blk, fp);
        }
        s = s->nxt;
    }
}
#+END_SRC
