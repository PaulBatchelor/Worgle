#+TITLE: Worgle Database
This section outlines the portion of Worgle which handles
database export.
The main idea behind this is to be able to take a program
Org, and export all the metadata into a SQLite database. In
the future, other programs will be written to query the
generated database and dynamically display portions of the
program in interesting ways.
* Worgle Database Top
** Top-level files
The worgle database interface generates a single C and header file.
#+NAME: db-top
#+BEGIN_SRC c :tangle db.c
#include <stdio.h>
#include <sqlite3.h>
#include "worgle.h"
#include "worgle_private.h"
#include "db.h"
<<static_db_functions>>
<<functions>>
#+END_SRC
#+NAME: db-header
#+BEGIN_SRC c :tangle db.h
#ifndef WORGLE_DB_H
#define WORGLE_DB_H
<<macros>>
<<function_declarations>>
#endif
#+END_SRC
** Top-level functions
*** Insert Schemas
The initial worgle schemas are created inside the database
using the function =worgle_db_schemas=. This *must* be
called before attempting to do anything else, and it
should only be called once.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_schemas(worgle_d *worg, sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_schemas(worgle_d *worg, sqlite3 *db)
{
    <<schemas>>
}
#+END_SRC
*** Insert Data
When worgle is done parsing data, the data is
written to the database using the funtion
=worgle_db_generate=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_generate(worgle_d *worg, sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_generate(worgle_d *worg, sqlite3 *db)
{
    sqlite3_exec(db, "BEGIN;\n", NULL, NULL, NULL);
    <<inserts>>
    sqlite3_exec(db, "COMMIT;\n", NULL, NULL, NULL);
}
#+END_SRC
*** Clear Tables
Will clear any existing tables where information is stored.
This will only eliminate tables that Worgle writes to,
leaving other tables untouched. This is particularly useful
when utilizing the SQLite database for other things.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_clear(sqlite3 *db, int program);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void delete_table(sqlite3 *db,
                         char *sbuf,
                         const char *tbl,
                         int program)
{
    if(program < 0) {
        sprintf(sbuf,
                "DELETE FROM %s WHERE 1;\n",
                tbl);
    } else {
        sprintf(sbuf,
                "DELETE FROM %s WHERE program == %d;\n",
                tbl,
                program);
    }
    sqlite3_exec(db, sbuf, NULL, NULL, NULL);
}

void worgle_db_clear(sqlite3 *db, int program)
{
    char sbuf[256];
    delete_table(db, sbuf, "resources", program);
    delete_table(db, sbuf, "blocks", program);
    delete_table(db, sbuf, "headers", program);
    delete_table(db, sbuf, "segments", program);
    delete_table(db, sbuf, "files", program);
}
#+END_SRC
* SQLite Table Schemas
The following section describes the SQLite schemas for all
the tables needed by Worgle.
** Segment Schema
The segment schema contains the following items:

- the UUID
- the type (stored as integer)
- the line number
- the text itself (stored as text)
- the file (filename, not UUID) that it belongs to
- the UUID of the next segment

The types for segments are defined in an ENUM.

#+NAME: macros
#+BEGIN_SRC c
enum {
    SEGMENT_STRING,
    SEGMENT_REFERENCE
};
#+END_SRC

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE segments(\n"
             "program INTEGER,\n"
             "id INTEGER,\n"
             "type INTEGER,\n"
             "str TEXT,\n"
             "linum INTEGER,\n"
             "filename TEXT,\n"
             "next_segment INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
** Block Schema
The block schema contains the following items:

- the UUID
- the UUID of the segment head
- the name of the block

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE blocks("
             "program INTEGER,\n"
             "id INTEGER,\n"
             "head_segment INTEGER,\n"
             "name TEXT,\n"
             "nblocks INTEGER,\n"
             "nsegs INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
** File Schema
A file name table contains the following:

- UUID
- filename
- the top-level block
- the UUID for the next file (0 if there is no next file)

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE files(\n"
             "program INTEGER,\n"
             "id INTEGER,\n"
             "filename TEXT,\n"
             "top INTEGER,\n"
             "next_file INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
** Resource Schema
Every single UUID is logged into a single table. This table has every single
UUID and their type.

- UUID
- type (as an integer)

The integer-based types are defined as enums below:

#+NAME: macros
#+BEGIN_SRC c
enum {
    RES_FILE,
    RES_BLOCK,
    RES_SEGMENT,
    RES_HEADER,
    RES_CONTENT,
    RES_BLKREF
};
#+END_SRC

#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE resources(\n"
             "program INTEGER,\n"
             "id INTEGER,\n"
             "type INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC

This operation happens so often that there is a function for it called
=insert_resource=.

#+NAME: static_db_functions
#+BEGIN_SRC c
static void insert_resource(sqlite3 *db,
                            int prog,
                            worgle_long id,
                            int type)
{
    sqlite3_stmt *stmt;
    int rc;

    sqlite3_prepare_v2(db,
                       "INSERT INTO resources"
                       "(id, type, program)\n"
                       "VALUES(?1,?2,?3);",
                       -1,
                       &stmt,
                       NULL);

    sqlite3_bind_int(stmt, 1, id);
    sqlite3_bind_int(stmt, 2, type);
    sqlite3_bind_int(stmt, 3, prog);

    rc = sqlite3_step(stmt);

    if(rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
}
#+END_SRC
** DONE Header Schema
CLOSED: [2019-09-12 Thu 08:44]
The header schema contains the following:
- UUID(?)
- Section Number (as a string)
- Section Name
- Level
- Org File Name
- Line Number
#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE headers(\n"
             "program INTEGER,\n"
             "id INTEGER,\n"
             "section TEXT,\n"
             "level INTEGER,\n"
             "name TEXT,\n"
             "filename TEXT,\n"
             "linum INTEGER,\n"
             "next INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
** DONE Content Schema
CLOSED: [2019-12-10 Tue 17:20]
Hopefully, it will be:
- UUID
- Section Location (as a string)
- Starting Line Number
- File name
- Content
#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE content(\n"
             "program INTEGER,\n"
             "id INTEGER,\n"
             "section TEXT,\n"
             "filename TEXT,\n"
             "linum INTEGER,\n"
             "content TEXT,\n"
             "next INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
** DONE Block Reference
CLOSED: [2020-03-10 Tue 18:50]
This provides information about a particular Block position,
but not the content itself.
This includes:
- UUID
- Section Number

This is a separate section from the =blocks= section, for
two reasons. One, because the section number is only derived
while it is being parsed. Two, to more cleanly separate the
woven content from the tangled content.
#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE TABLE blkref(\n"
             "program INTEGER,\n"
             "id INTEGER,\n"
             "ref INTEGER,\n"
             "pos INTEGER,\n"
             "segoff INTEGER,\n"
             "prev_lastseg INTEGER,\n"
             "section TEXT,\n"
             "filename TEXT,\n"
             "linum INTEGER,\n"
             "next INTEGER\n"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
** Type View
The resource table has a redundant column which provides
a text version of the human readable type id. This view,
called =reslist=, creates a more human readable version
of the =resources= table.
#+NAME: schemas
#+BEGIN_SRC c
sqlite3_exec(db,
             "CREATE VIEW reslist AS "
             "SELECT "
             "program, id, "
             "CASE type "
             "WHEN 0 THEN 'File' "
             "WHEN 1 THEN 'Block' "
             "WHEN 2 THEN 'Segment' "
             "WHEN 3 THEN 'Header' "
             "WHEN 4 THEN 'Content' "
             "WHEN 5 THEN 'Block Reference' "
             "ELSE 'Unknown' END as type "
             "FROM resources;"
             ");\n",
             NULL,
             NULL,
             NULL);
#+END_SRC
* SQLite Insert Statements
This section pertains to the actual SQLite insert statements
that occur.
Generally speaking, data in Worgle can be broken up into
two perspectives: tangled data (the generated code for the
compiler), and woven data (the markup and semantics).
** SQLite Woven Data
Unlike Tangled data, woven data is inserted while the file
is being parsed. As a result of this, the functionality is
split up amongst a few functions instead of having one
top-level function.
*** DONE Top-level Weave Insert
CLOSED: [2019-09-12 Thu 08:55]
Entry point for inserting woven data are the org file lists.
#+NAME: inserts
#+BEGIN_SRC c
worgle_db_insert_orglist(worg, db);
#+END_SRC
*** DONE Org Filelist Insert
CLOSED: [2019-09-12 Thu 10:39]
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_orglist(worgle_d *worg, sqlite3 *db);
#+END_SRC

A thing to think about when inserting multiple orgs at once
is the top-level section number. If left unattended, the
internal number will always go back to 1 at the start
of the file. To prevent this, the program must be able to
save the top-most section number.

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_orglist(worgle_d *worg, sqlite3 *db)
{
    worgle_orgfile *orgs;
    worgle_textbuf *txt;
    int n;
    int sec;

    orgs = worg->orgs;
    txt = worg->buffers;
    sec = 0;
    for(n = 0; n < worg->nbuffers; n++) {
        worgle_db_insert_orgfile(worg,
                                 &orgs[n],
                                 &txt[n].filename,
                                 db,
                                 &sec);
    }
}
#+END_SRC
*** DONE Org File Insert
CLOSED: [2019-09-12 Thu 10:40]
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_orgfile(worgle_d *worg,
                              worgle_orgfile *f,
                              worgle_string *filename,
                              sqlite3 *db,
                              int *sec);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_orgfile(worgle_d *worg,
                              worgle_orgfile *f,
                              worgle_string *filename,
                              sqlite3 *db,
                              int *sec)
{
    size_t n;
    worgle_orglet *o;
    worgle_orglet *nxt;
    int curlvl;
    int counter[10];
    char strbuf[256];

    if (f->size <= 0) return;

    curlvl = 0;
    o = f->head;
    for (n = 1; n < 10; n++) counter[n] = 0;
    counter[0] = *sec;
    for (n = 0; n < f->size; n++) {
        nxt = o->next;
        switch (o->type) {
            case 0: /* Header */
                worgle_db_insert_header(worg,
                                        o,
                                        filename,
                                        &curlvl,
                                        counter,
                                        strbuf,
                                        db);
                break;
            case 1: /* Content */
                worgle_db_insert_content(worg,
                                         o,
                                         filename,
                                         curlvl,
                                         counter,
                                         strbuf,
                                         db);
                break;
            case 2: /* blkref */
                worgle_db_insert_blkref(worg,
                                        o,
                                        filename,
                                        curlvl,
                                        counter,
                                        strbuf,
                                        db);
                break;
        }
        o = nxt;
    }
    *sec = counter[0];
}
#+END_SRC
*** DONE Header Insert
CLOSED: [2019-09-12 Thu 14:29]
:LOGBOOK:
CLOCK: [2019-09-12 Thu 09:48]--[2019-09-12 Thu 09:48] =>  0:00
:END:
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_header(worgle_d *worg,
                             worgle_orglet *o,
                             worgle_string *fname,
                             int *curlvl,
                             int *counter,
                             char *strbuf,
                             sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_header(worgle_d *worg,
                             worgle_orglet *o,
                             worgle_string *fname,
                             int *curlvl,
                             int *counter,
                             char *strbuf,
                             sqlite3 *db)
{
    worgle_orglet_header *h;
    int diff;
    int n;
    int bufpos;
    sqlite3_stmt *stmt;
    int rc;
    int prog;

    h = o->ud;

    prog = worg->prog;

    if (*curlvl <= 0) *curlvl = 1;

    if (h->lvl > *curlvl) {
        diff = h->lvl - *curlvl;
        for (n = 1; n <= diff; n++) {
            counter[(*curlvl + n) - 1] = 0;
        }
    }

    counter[h->lvl - 1]++;

    bufpos = 0;
    for (n = 0; n < h->lvl; n++) {
        bufpos += sprintf(&strbuf[bufpos], "%d.", counter[n]);
    }
    *curlvl = h->lvl;

    insert_resource(db, prog, o->id, RES_HEADER);

    sqlite3_prepare_v2(db,
                       "INSERT INTO headers"
                       "(id, section, level, name, "
                       "filename, linum, next, program)"
                       "VALUES(?1,?2,?3,?4,"
                       "?5,?6,?7,?8);",
                       -1,
                       &stmt,
                       NULL);

    sqlite3_bind_int(stmt, 1, o->id);
    sqlite3_bind_text(stmt, 2, strbuf, bufpos, NULL);
    sqlite3_bind_int(stmt, 3, h->lvl);
    sqlite3_bind_text(stmt, 4,
                      h->str.str, h->str.size,
                      NULL);
    sqlite3_bind_text(stmt, 5,
                      fname->str, fname->size,
                      NULL);
    sqlite3_bind_int(stmt, 6, o->linum);

    if (o->next == NULL) {
        sqlite3_bind_int(stmt, 7, 0);
    } else {
        sqlite3_bind_int(stmt, 7, o->next->id);
    }

    sqlite3_bind_int(stmt, 8, prog);

    rc = sqlite3_step(stmt);

    if (rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }
    sqlite3_finalize(stmt);
}
#+END_SRC
*** DONE Content Insert
CLOSED: [2019-12-10 Tue 20:15]
Anything in between a header and the start of a code block
is considered to be "content". Any time a new header or
codeblock is started, this function will be inserted

#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_content(worgle_d *worg,
                              worgle_orglet *o,
                              worgle_string *fname,
                              int curlvl,
                              int *counter,
                              char *strbuf,
                              sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_content(worgle_d *worg,
                              worgle_orglet *o,
                              worgle_string *fname,
                              int curlvl,
                              int *counter,
                              char *strbuf,
                              sqlite3 *db)
{
    worgle_orglet_content *c;
    int n;
    int bufpos;
    sqlite3_stmt *stmt;
    int rc;
    int prog;

    c = o->ud;

    prog = worg->prog;

    bufpos = 0;

    for (n = 0; n < curlvl; n++) {
        bufpos += sprintf(&strbuf[bufpos], "%d.",
                          counter[n]);
    }

    insert_resource(db, prog, o->id, RES_CONTENT);

    sqlite3_prepare_v2(db,
                       "INSERT INTO content"
                       "(program, id, section, "
                       "filename, linum, content, next)"
                       "VALUES(?1,?2,?3,?4,?5,?6,?7);",
                       -1,
                       &stmt,
                       NULL);

    sqlite3_bind_int(stmt, 1, prog);
    sqlite3_bind_int(stmt, 2, o->id);
    sqlite3_bind_text(stmt, 3, strbuf, bufpos, NULL);
    sqlite3_bind_text(stmt, 4,
                      fname->str, fname->size,
                      NULL);
    sqlite3_bind_int(stmt, 5, o->linum);

    sqlite3_bind_text(stmt, 6,
                      c->text.str, c->text.size,
                      NULL);

    if (o->next == NULL) {
        sqlite3_bind_int(stmt, 7, 0);
    } else {
        sqlite3_bind_int(stmt, 7, o->next->id);
    }

    rc = sqlite3_step(stmt);

    if (rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
}
#+END_SRC
*** DONE Block (Position) Insert
CLOSED: [2020-05-13 Wed 08:56]
Any time a block is started, a note of the position it is in
is stored as metadata. This will include the section, as
well as line number and filename.

#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_blkref(worgle_d *worg,
                             worgle_orglet *o,
                             worgle_string *fname,
                             int curlvl,
                             int *counter,
                             char *strbuf,
                             sqlite3 *db);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_blkref(worgle_d *worg,
                             worgle_orglet *o,
                             worgle_string *fname,
                             int curlvl,
                             int *counter,
                             char *strbuf,
                             sqlite3 *db)
{
    worgle_orglet_blkref *b;
    int n;
    int bufpos;
    sqlite3_stmt *stmt;
    int rc;
    int prog;

    b = o->ud;

    prog = worg->prog;

    bufpos = 0;

    for (n = 0; n < curlvl; n++) {
        bufpos += sprintf(&strbuf[bufpos], "%d.",
                          counter[n]);
    }

    insert_resource(db, prog, o->id, RES_BLKREF);

    sqlite3_prepare_v2(db,
                       "INSERT INTO blkref"
                       "(program, id, section, "
                       "filename, linum, next, ref, pos,"
                       "segoff, prev_lastseg)"
                       "VALUES(?1,?2,?3,?4,?5,?6,?7,?8,?9,?10);",
                       -1,
                       &stmt,
                       NULL);

    sqlite3_bind_int(stmt, 1, prog);
    sqlite3_bind_int(stmt, 2, o->id);
    sqlite3_bind_text(stmt, 3, strbuf, bufpos, NULL);
    sqlite3_bind_text(stmt, 4,
                      fname->str, fname->size,
                      NULL);
    sqlite3_bind_int(stmt, 5, o->linum);

    if (o->next == NULL) {
        sqlite3_bind_int(stmt, 6, 0);
    } else {
        sqlite3_bind_int(stmt, 6, o->next->id);
    }

    sqlite3_bind_int(stmt, 7, b->blk->id);
    sqlite3_bind_int(stmt, 8, b->pos);
    sqlite3_bind_int(stmt, 9, b->segoff);
    sqlite3_bind_int(stmt, 10, b->prev_lastseg);

    rc = sqlite3_step(stmt);

    if (rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
}
#+END_SRC
** SQLite Tangled Data
The way Worgle generates data is by recursively iterating
through the file list. The SQLite table will be populated
in the same way.
*** Top-level tangle insert
Table population tangle insert is done inside the function
=worgle_db_generate=.

#+NAME: inserts
#+BEGIN_SRC c
worgle_db_insert_filelist(worg, &worg->flist, db);
#+END_SRC
*** Filelist Insert
The top-level part of the code walks through the file list inside of
=worgle_db_insert_filelist=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_filelist(worgle_d *worg,
                               worgle_filelist *flist,
                               sqlite3 *db);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_filelist(worgle_d *worg,
                               worgle_filelist *flist,
                               sqlite3 *db)
{
    worgle_file *f;
    int n;

    f = flist->head;
    for(n = 0; n < flist->nfiles; n++) {
        worgle_db_insert_file(worg, f, db);
        f = f->nxt;
    }
}
#+END_SRC
*** File Insert
A file is inserted with the function =worgle_db_insert_file=.
#+NAME: function_declarations
#+BEGIN_SRC c
void worgle_db_insert_file(worgle_d *worg,
                           worgle_file *file,
                           sqlite3 *db);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
void worgle_db_insert_file(worgle_d *worg,
                           worgle_file *file,
                           sqlite3 *db)
{
    worgle_long next_id;
    sqlite3_stmt *stmt;
    worgle_string *filename;
    int rc;
    int prog;

    if(file->nxt == NULL) next_id = 0;
    else next_id = file->nxt->id;

    prog = worg->prog;

    sqlite3_prepare_v2(db,
                       "INSERT INTO files"
                       "(id, next_file, filename, "
                       "top, program)"
                       "VALUES(?1, ?2, ?3, ?4, ?5);",
                       -1,
                       &stmt,
                       NULL);


    sqlite3_bind_int(stmt, 1, file->id);
    sqlite3_bind_int(stmt, 2, next_id);

    filename = &file->filename;
    sqlite3_bind_text(stmt, 3,
                      filename->str, filename->size,
                      NULL);

    sqlite3_bind_int(stmt, 4, file->top->id);
    sqlite3_bind_int(stmt, 5, prog);

    rc = sqlite3_step(stmt);

    if(rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
    insert_resource(db, prog, file->id, RES_FILE);
    worgle_db_insert_block(worg, file->top, db);
}
#+END_SRC
*** Block Insert
A block is inserted with the function =worgle_db_insert_block=.
#+NAME:function_declarations
#+BEGIN_SRC c
void worgle_db_insert_block(worgle_d *worg,
                            worgle_block *block,
                            sqlite3 *db);
#+END_SRC

#+NAME:functions
#+BEGIN_SRC c
void worgle_db_insert_block(worgle_d *worg,
                            worgle_block *block,
                            sqlite3 *db)
{
    worgle_segment *s;
    int n;
    worgle_long next_segment;
    worgle_block *blk;
    worgle_hashmap *hm;
    sqlite3_stmt *stmt;
    worgle_string *name;
    int rc;
    int prog;

    s = block->head;
    hm = &worg->dict;

    prog = worg->prog;

    sqlite3_prepare_v2(db,
                       "INSERT INTO blocks"
                       "(id,"
                       "head_segment,"
                       "name,"
                       "program,"
                       "nblocks,"
                       "nsegs)\n"
                       "VALUES(?1, ?2, ?3, ?4, ?5, ?6);",
                       -1,
                       &stmt,
                       NULL);
    sqlite3_bind_int(stmt, 1, block->id);
    sqlite3_bind_int(stmt, 2, block->head->id);

    name = &block->name;
    sqlite3_bind_text(stmt, 3,
                      name->str, name->size,
                      NULL);
    sqlite3_bind_int(stmt, 4, prog);
    sqlite3_bind_int(stmt, 5, block->nblocks);
    sqlite3_bind_int(stmt, 6, block->nsegs);

    rc = sqlite3_step(stmt);

    if(rc != SQLITE_DONE) {
        fprintf(stderr,
                "SQLite error: %s\n",
                sqlite3_errmsg(db));
        return;
    }

    sqlite3_finalize(stmt);

    insert_resource(db, prog, block->id, RES_BLOCK);
    for(n = 0; n < block->nsegs; n++) {
        sqlite3_prepare_v2(db,
                        "INSERT INTO segments"
                        "(id,"
                        "type,"
                        "linum,"
                        "next_segment,"
                        "str,"
                        "filename,"
                        "program)\n"
                        "VALUES(?1,?2,?3,?4,?5,?6,?7);",
                        -1,
                        &stmt,
                        NULL);
        if(s->nxt != NULL) next_segment = s->nxt->id;
        else next_segment = 0;
        sqlite3_bind_int(stmt, 1, s->id);
        sqlite3_bind_int(stmt, 2, s->type);
        sqlite3_bind_int(stmt, 3, s->linum);
        sqlite3_bind_int(stmt, 4, next_segment);

        sqlite3_bind_text(stmt, 5,
                        s->str.str, s->str.size,
                        NULL);
        sqlite3_bind_text(stmt, 6,
                        s->filename->str, s->filename->size,
                        NULL);
        sqlite3_bind_int(stmt, 7, prog);
        if(rc != SQLITE_DONE) {
            fprintf(stderr,
                    "SQLite error: %s\n",
                    sqlite3_errmsg(db));
        }

        rc = sqlite3_step(stmt);

        if(rc != SQLITE_DONE) {
            fprintf(stderr,
                    "SQLite error: %s\n",
                    sqlite3_errmsg(db));
        }
        sqlite3_finalize(stmt);
        insert_resource(db, prog, s->id, RES_SEGMENT);
        if(worgle_segment_is_reference(s)) {
            if(!worgle_hashmap_find(hm, &s->str, &blk)) break;
            worgle_db_insert_block(worg, blk, db);
        }
        s = s->nxt;
    }
}
#+END_SRC
