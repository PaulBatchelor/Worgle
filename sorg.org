#+TITLE: Sorg

* Introduction

This is Sorg, the Simple Org parser, inspired by
[[https://github.com/Gottox/smu][smu]]. Sorg takes in an input file or stream,
converts it to HTML, and writes it to an output stream
* Main loop

#+NAME: main_loop
#+BEGIN_SRC c :tangle sorg.c
#include <stdio.h>
#include <stdlib.h>

<<enums>>
<<sorg_data>>
<<function_declarations>>
<<functions>>
<<parsing_top>>
<<getline>>

int main(int argc, char *argv[])
{
    FILE *in;
    FILE *out;
    char *line;
    size_t read;
    size_t n;
    sorg_d sorg;

    if(argc < 2) {
        in = stdin;
    } else {
        in = fopen(argv[1], "r");
    }

    out = stdout;

    line = NULL;
    n = 0;

    sorg_init(&sorg);

    while((read = sorg_getline(&line, &n, in)) != -1) {
        parse(&sorg, out, line, read);
    }

    if(in != stdin) fclose(in);
    if(line != NULL) free(line);
    return 0;
}
#+END_SRC
* Sorg Data

All necessary data for sorg is encapsulated in a struct called =sorg_d=.

#+NAME: sorg_data
#+BEGIN_SRC c
typedef struct {
    <<sorg_data_contents>>
} sorg_d;
#+END_SRC

Sorg data is initialized with the function =sorg_init=.

#+NAME:functions
#+BEGIN_SRC c
void sorg_init(sorg_d *sorg) {
    <<initialize_stuff>>
}
#+END_SRC

The current mode of the state machine is stored in a variable called
=mode=.

#+NAME: sorg_data_contents
#+BEGIN_SRC c
int mode;
#+END_SRC

By default, it is set to be none, which is the general markdown
mode.

#+NAME: initialize_stuff
#+BEGIN_SRC c
sorg->mode = MODE_NONE;
#+END_SRC

Sorg internally keeps track of the current position (=pos=) in the line.

TODO: better words here.
off: starting offset
blksize: text block size

#+NAME: sorg_data_contents
#+BEGIN_SRC c
size_t pos;
size_t off;
size_t blksize;
#+END_SRC

#+NAME: initialize_stuff
#+BEGIN_SRC c
sorg->pos = 0;
sorg->off = 0;
sorg->blksize = 0;
#+END_SRC

* Parsing
** Parsing Top
The top-level parsing function is twofold: it is designed to take in org
markup, and then produce equivalent HTML output.

Each character of the string is fed through a state machine. The mode of
the state machine determines what kind of formatting to add. HTML
formatting is tag based. A change *to* a state indicates the start
of a particular tag. A change *from* from a particular state indicates
the end of that particular tag.

Text is written a block at a time using =fwrite=. Blocks are written
any time a state changes. Blocks are also written at the end.

#+NAME: parsing_top
#+BEGIN_SRC c
static void parse(sorg_d *sorg, FILE *out, char *buf, size_t size)
{
    sorg->pos = 0;
    sorg->off = 0;
    sorg->blksize = 0;

    while(sorg->pos < size) {
        switch(sorg->mode) {
            case MODE_NONE:
                if(is_header(sorg, &buf[sorg->pos], size - sorg->pos)) {
                    print_header(sorg, buf, size, out);
                    sorg->mode = MODE_NONE;
                    return;
                } else {
                    sorg->mode = MODE_TEXT;
                    sorg->off = sorg->pos;
                    sorg->blksize = 1;
                }
                break;
            case MODE_TEXT:
                <<parse_formatted>>
                sorg->blksize++;
                sorg->pos++;
                break;
        }
    }


    fwrite(buf + sorg->off, 1, sorg->blksize, out);
    sorg->mode = MODE_NONE;
}
#+END_SRC
** Type Enum
#+NAME: enums
#+BEGIN_SRC c
enum {
    <<types>>
    MODE_NONE
};
#+END_SRC
** None mode

By default, the state machine begins in NONE mode. In this mode, the parser
will be parsing the line for new states.

** Headings

Headers in org-mode always start at the beginning of the line, and
must have a number of stars, followed by a space. This is checked for
with the function =is_header=.

#+NAME: function_declarations
#+BEGIN_SRC c
static int is_header(sorg_d *sorg, char *buf, size_t size);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int is_header(sorg_d *sorg, char *buf, size_t size)
{
    size_t s;

    if(size == 0) return 0;

    if(buf[0] != '*') return 0;

    for(s = 1; s < size; s++) {
        if(buf[s] == '*') {
            continue;
        } else if(buf[s] == ' ') {
            return 1;
        } else {
            return 0;
        }
    }
    return 0;
}
#+END_SRC

If the line is indeed a header, the parser will scan the line again, this
time counting the number of stars before the space indicating the header
level. The header will then treat the rest of the line as the header text.
This action is done with the function =print_header=.

#+NAME:function_declarations
#+BEGIN_SRC c
static void print_header(sorg_d *sorg, char *buf, size_t size, FILE *out);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static void print_header(sorg_d *sorg, char *buf, size_t size, FILE *out)
{
    size_t s;
    size_t off;
    int mode;
    int level;
    off = 0;
    mode = 0;
    level = 0;
    for(s = 0; s < size; s++) {
        if(mode == 2) break;
        switch(mode) {
            case 0: /* asterisks */
                if(buf[off] != '*') {
                    mode = 1;
                    off++;
                    break;
                }
                level++;
                off++;
                break;
             case 1: /* spaces */
                if(buf[off] != ' ') {
                    mode = 2;
                    break;
                }
        }
    }

    if(buf[size - 1] == '\n') size--; /* chomp */

    fprintf(out, "<h%d>", level);
    fwrite(buf + off, 1, size - off, out);
    fprintf(out, "</h%d>\n", level);

}
#+END_SRC

This line will then print this text to the output file between header
tags.

** Plain Text

Plain text can be roughly defined as stuff in between headers that isn't
a code block. In this mode, the parser looks for [[Formatted Text]].

#+NAME:types
#+BEGIN_SRC c
MODE_TEXT,
#+END_SRC

** Code Blocks

All code blocks are assumed to begin with the =NAME= tag with the code
block immediately following it on the next line.

Code blocks begin and end with =BEGIN_SRC= and =END_SRC= tags. When a
new code block declaration begins, the mode is set to be in code mode.

#+NAME:types
#+BEGIN_SRC c
MODE_CODE,
#+END_SRC

Lines will remain in code mode until the =END_SRC= tag is found.

** Formatted Text

All formatted text can be generally described as encapsulated text. Each
formatting is surrounded by a special character (or characters). Because they
are so similar, this kind of parsing can be generalized.
*** The core mechanic

First, the parser checks to see if an item is encapsulated by a particular
delimeter =delim= of size =dsize=.
If there are matching delimeters on the same line, then
the text between is is considered to be encapsulated.

NOTE: for now, =dsize= only works with a size of 1.

#+NAME:function_declarations
#+BEGIN_SRC c
static int is_encapsulated(sorg_d *sorg,
                    const char *delim,
                    int dsize,
                    char *buf,
                    size_t size);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int is_encapsulated(sorg_d *sorg,
                    const char *delim,
                    int dsize,
                    char *buf,
                    size_t size)
{
    size_t s;
    if(buf[0] != delim[0]) return 0;
    size = size - 1;
    for(s = 1; s < size; s++) if(buf[s] == delim[0]) return 1;
    return 0;
}
#+END_SRC

Once encapsulated text is found, the encapsulated text is printed to
screen. In HTML, this means they are between HTML tags of a certain
label. This function returns how many characters it parsed, so the parser
knows to skip over them.

#+NAME:function_declarations
#+BEGIN_SRC c
static size_t print_encapsulated(sorg_d *sorg,
                          const char *delim,
                          int dsize,
                          char *buf,
                          size_t size,
                          const char *tag,
                          FILE *out);
#+END_SRC

This function extracts the text in between the two delimiters and
then prints it between the specified HTML tags. The trick with printing
the text is factoring in offsets for *both* sets of delimiters. To avoid
the leftmost delimiter, offset by the size of the delimiter. To avoid the
rightmost delimiter, negate the size by two times the delimiter to compensate
for both the rightmost and leftmost delimiter.

#+NAME:functions
#+BEGIN_SRC c
static size_t print_encapsulated(sorg_d *sorg,
                          const char *delim,
                          int dsize,
                          char *buf,
                          size_t size,
                          const char *tag,
                          FILE *out)
{
    size_t off;
    size_t s;
    off = 1;
    size = size - 1;
    for(s = 1; s < size; s++) {
        off++;
        if(buf[s] == delim[0]) {
            break;
        }
    }
    fprintf(out, "<%s>", tag);
    fwrite(buf + dsize, 1, off - 2*dsize, out);
    fprintf(out, "</%s>", tag);
    return off;
}
#+END_SRC

In the parse loop, both =is_encapsulated= and =print_encapsulated=
can be combined together in a function called =chk_encapsulated=. The
=chk= is short for check, and the abbreviation only used to make sure
the function call fits on the same line.

On success, the function will return "true", causing the function
to break out of the chain of if statments.

#+NAME:function_declarations
#+BEGIN_SRC c
static int chk_encapsulated(sorg_d *sorg,
                          const char *delim,
                          int dsize,
                          char *buf,
                          size_t size,
                          const char *tag,
                          FILE *out);
#+END_SRC

#+NAME:functions
#+BEGIN_SRC c
static int chk_encapsulated(sorg_d *sorg,
                          const char *delim,
                          int dsize,
                          char *buf,
                          size_t size,
                          const char *tag,
                          FILE *out)
{
    if(is_encapsulated(sorg,
                        delim,
                        dsize,
                        &buf[sorg->pos],
                        size - sorg->pos))
    {
        fwrite(buf + sorg->off, 1, sorg->blksize - 1, out);
        sorg->pos += print_encapsulated(sorg,
                                        delim,
                                        dsize,
                                        &buf[sorg->pos],
                                        size - sorg->pos,
                                        tag,
                                        out);
        sorg->blksize = 1;
        sorg->off = sorg->pos;
        return 1;
    }

    return 0;
}
#+END_SRC

*** Format Styles
**** Bold

#+NAME: parse_formatted
#+BEGIN_SRC c
if(chk_encapsulated(sorg, "*", 1, buf, size, "b", out)) break;
#+END_SRC
**** Italics

#+NAME: parse_formatted
#+BEGIN_SRC c
if(chk_encapsulated(sorg, "/", 1, buf, size, "i", out)) break;
#+END_SRC
**** Preformatted

#+NAME: parse_formatted
#+BEGIN_SRC c
if(chk_encapsulated(sorg, "=", 1, buf, size, "code", out)) break;
#+END_SRC
**** Underline

#+NAME: parse_formatted
#+BEGIN_SRC c
if(chk_encapsulated(sorg, "_", 1, buf, size, "u", out)) break;
#+END_SRC
**** TeX math mode
** Ordered Lists
** Unordered Lists
** "TODO" headings
* Getline

The Sorg parser parses a file one line at a time.

Because the getline function is not part of the ANSI C standard, an
implementation is used in it's place.

#+NAME: getline
#+BEGIN_SRC c
size_t sorg_getline(char **lineptr, size_t *n, FILE *stream) {
    char *bufptr = NULL;
    char *p = bufptr;
    size_t size;
    int c;

    if (lineptr == NULL) {
        return -1;
    }
    if (stream == NULL) {
        return -1;
    }
    if (n == NULL) {
        return -1;
    }
    bufptr = *lineptr;
    size = *n;

    c = fgetc(stream);
    if (c == EOF) {
        return -1;
    }
    if (bufptr == NULL) {
        bufptr = malloc(128);
        if (bufptr == NULL) {
            return -1;
        }
        size = 128;
    }
    p = bufptr;
    while(c != EOF) {
        if ((p - bufptr) > (size - 1)) {
            size = size + 128;
            bufptr = realloc(bufptr, size);
            if (bufptr == NULL) {
                return -1;
            }
        }
        *p++ = c;
        if (c == '\n') {
            break;
        }
        c = fgetc(stream);
    }


    *lineptr = bufptr;

    /* Some text editors do not insert a linebreak on the last line.
     * For these cases, shift everything by 1.
     */

    if(c == EOF) {
        p = p + 1;
        size += 1;
    }
    *p++ = '\0';
    *n = size;

    return p - bufptr - 1;
}

#+END_SRC
