* Core
The section described here outlines core functionality for
worgmap. This involves anything related to querying tables
for SQLite data.

** DONE Tangled Files
CLOSED: [2019-08-31 Sat 06:13]
Core tanlges itself into a C and a header file, called
=core.c= and =core.h=, respectively.
#+NAME: core.h
#+BEGIN_SRC c :tangle core.h
#ifndef CORE_H
#define CORE_H
<<typedefs>>
<<function_declarations>>
#endif
#+END_SRC
#+NAME: core_private.h
#+BEGIN_SRC c :tangle core_private.h
#ifndef CORE_PRIVATE_H
#define CORE_PRIVATE_H
<<structs>>
#endif
#+END_SRC
#+NAME: core.c
#+BEGIN_SRC c :tangle core.c
#include <sqlite3.h>
#include <stdio.h>
#include "core.h"
#include "core_private.h"
<<constants>>
<<functions>>
#+END_SRC
** DONE wmp_core
CLOSED: [2019-08-31 Sat 06:13]
*** Struct
SQLite data is indirectly handled inside of a struct called
=wmp_core=. That's all it does for now, but I fully expect
things to change in the future.

#+NAME: typedefs
#+BEGIN_SRC c
typedef struct wmp_core wmp_core;
#+END_SRC

#+NAME: structs
#+BEGIN_SRC c
struct wmp_core {
    sqlite3 *db;
};
#+END_SRC
*** DONE Opening the database
CLOSED: [2019-08-31 Sat 06:09]
The database handled is opened with the function
=wmp_core_open=.
#+NAME: function_declarations
#+BEGIN_SRC c
int wmp_core_open(wmp_core *core, const char *filename);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
int wmp_core_open(wmp_core *core, const char *filename)
{
    sqlite3 *db;
    int rc;

    core->db = NULL;
    rc = sqlite3_open(filename, &db);
    if (rc) {
        fprintf(stderr,
                "Could not open database: %s",
                sqlite3_errmsg(db));
        sqlite3_close(db);
        return 0;
    }

    core->db = db;
    return 1;
}
#+END_SRC
*** DONE Closing the database
CLOSED: [2019-08-31 Sat 06:10]
The database handle is closed with the function
=wmp_core_close=.
#+NAME: function_declarations
#+BEGIN_SRC c
void wmp_core_close(wmp_core *core);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
void wmp_core_close(wmp_core *core)
{
    sqlite3_close(core->db);
}
#+END_SRC
*** DONE Getting SQLite data type
CLOSED: [2019-08-31 Sat 06:13]
Retrieved using the function =wmp_core_db=.

This will only be defined if the sqlite3 header
file is included before this header. Otherwise,
including sqlite3 would be a prereq for anything
wanting to include =core.h=.
#+NAME: function_declarations
#+BEGIN_SRC c
#ifdef SQLITE3_H
sqlite3 * wmp_core_db(wmp_core *core);
#endif
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
sqlite3 * wmp_core_db(wmp_core *core)
{
    return core->db;
}
#+END_SRC
*** DONE Default Filename
CLOSED: [2019-08-31 Sat 06:21]
To make the CLI more terse, a default filename is used,
which can be configured through command line flags.
*** Global Definition
The default filename is =a.db=.

#+NAME: constants
#+BEGIN_SRC c
const char *db_filename = "a.db";
#+END_SRC
*** Setters/Getters
#+NAME: function_declarations
#+BEGIN_SRC c
const char * wmp_filename_get(void);
void wmp_filename_set(const char *filename);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
const char * wmp_filename_get(void)
{
    return db_filename;
}

void wmp_filename_set(const char *filename)
{
    db_filename = filename;
}
#+END_SRC
** TODO Resource
*** Struct
A =wmp_resource= is a record from the resource table.
Any thing that is a thing has a record here. The only things
that a resource stores is the UUID and the type flag.
#+NAME: typedefs
#+BEGIN_SRC c
typedef struct wmp_resource wmp_resource;
#+END_SRC
#+NAME: structs
#+BEGIN_SRC c
struct wmp_resource {
    unsigned int id;
    int type;
};
#+END_SRC
*** Finding a Resource
The function =wmp_find_resource= will find a resource with
a particular UUID and place store the values in the
=wmp_resource= struct. If the return value is false (0),
then there was a problem finding the resource.

#+NAME: function_declarations
#+BEGIN_SRC c
int wmp_find_resource(wmp_core *c,
                      unsigned int uuid,
                      wmp_resource *r);
#+END_SRC

No free function is needed here, since this struct does
not need to store any strings.

#+NAME: functions
#+BEGIN_SRC c
int wmp_find_resource(wmp_core *c,
                      unsigned int uuid,
                      wmp_resource *r)
{
    sqlite3 *db;
    sqlite3_stmt *stmt;
    int type;
    int rc;

    db = wmp_core_db(c);

    sqlite3_prepare_v2(db,
                       "SELECT type FROM resources "
                       "WHERE(id==?1);",
                       -1,
                       &stmt,
                       NULL);
    sqlite3_bind_int(stmt, 1, uuid);

    rc = sqlite3_step(stmt);

    if(rc == SQLITE_DONE) {
        sqlite3_finalize(stmt);
        return 0;
    }

    if(rc == SQLITE_ROW) {
        type = sqlite3_column_int(stmt, 0);

        r->id = uuid;
        r->type = type;
    } else {
        fprintf(stderr, "Error: %s\n", sqlite3_errmsg(db));
        sqlite3_finalize(stmt);
        return 0;
    }
    sqlite3_finalize(stmt);
    return 1;
}
#+END_SRC
*** Resource Type to String
Returns a human readable string from the type.
#+NAME: function_declarations
#+BEGIN_SRC c
const char *wmp_resource_typestring(wmp_resource *r);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
const char *wmp_resource_typestring(wmp_resource *r)
{
    switch(r->type) {
        case 0:
            return "File";
        case 1:
            return "Block";
        case 2:
            return "Segment";
    }
    return "Unknown";
}
#+END_SRC
** TODO Segment
A =wmp_segment= stores a segment of text from the segment
table.

A =wmp_segment= can be queried by UUID using the function
=wmp_find_segment=. If the return value is false (0), then
there was a problem finding the entry.

The function =wmp_find_segment= allocates memory to store
the segment text as a C-string. Because of this, a segment
must be freed using the function =wmp_segment_free=.
** TODO Block
=wmp_block= stores a reference to a codeblock.

It is initialized using =wmp_block_init=.

It is queried using =wmp_find_block=.

A block can also be found by querying the name via the
function =wmp_lookup_block=.

It is freed using =wmp_block_free=.
** TODO File
A =wmp_file= is a record containing the name of a file to
tangle to.

It is initialized using =wmp_file_init=.

It is queried using =wmp_find_file=.

A file can be queried by name directly via the function
=wmp_lookup_file=.

It is freed using =wmp_file_free=.
