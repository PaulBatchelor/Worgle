#+TITLE: Get
The "get" interface is a small test program used to test out
some of the core SQLite querying routines supplied by
worgmap.
* Tangled Files
#+NAME: get.c
#+BEGIN_SRC c :tangle get.c
#include <stdio.h>
#include <string.h>
#include <sqlite3.h>
#include <stdlib.h>
#include "core.h"
#include "core_private.h"
<<function_declarations>>
<<utils>>
<<functions>>
#+END_SRC
* The main program
The main program is contained in a function called
=get_main=, taking in =argc= and =argv= parameters.
#+NAME: function_declarations
#+BEGIN_SRC c
int p_get(int argc, char *argv[]);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
int p_get(int argc, char *argv[])
{
    int len;
    if(argc < 2) {
        print_help();
        return 1;
    }
    len = strlen(argv[1]);
    if(0) {
        /* starts the chain */
    }
    <<command_parsing>>
    else {
        fprintf(stderr,
                "Could not find subcommand '%s'\n",
                argv[1]);
        return 1;
    }
    return 0;
}
#+END_SRC
** Print Help
Prints all available commands if there are not enough
arguments provided.
#+NAME: function_declarations
#+BEGIN_SRC c
static void print_help(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void print_help(void)
{
    fprintf(stderr, "Available Commands\n\n");
    <<available_commands>>
}
#+END_SRC
** Matching
It's not enough to use =strncmp= with this program, because
then =file= and =filelist= will be treated as the same.
String length of the input string must be taken into
account.

The static function =match= is an abstraction around this.

#+NAME: function_declarations
#+BEGIN_SRC c
static int match(const char *s1,
                 int sz1,
                 const char *s2,
                 int sz2);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static int match(const char *s1,
                 int sz1,
                 const char *s2,
                 int sz2)
{
    return sz1 == sz2 && !strncmp(s1, s2, sz2);
}
#+END_SRC
* res
The =res= command will return the information of
a particular resource, given a UUID.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "res: prints resource info given UUID\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_res(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_res(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_resource res;
    unsigned int id;
    int err;
    int prog;

    err = 0;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    id = atoi(argv[1]);
    prog = 0;
    rc = wmp_find_resource(&core, id, &res, prog);

    if (!rc) {
        fprintf(stderr,
                "Could not find resource with id %d\n",
                id);
        err = 1;
    } else {
        printf("%d %d %s\n",
               res.id,
               res.type,
               wmp_resource_typestring(&res));
    }

    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "res", 3)) {
    argv++;
    argc--;
    get_res(argc, argv);
}
#+END_SRC
* block
The =block= command will return the information of
block with a particular UUID.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "blk: prints block info given UUID\n");
#+END_SRC

#+NAME: utils
#+BEGIN_SRC c
static void print_block(wmp_block *blk)
{
    printf("id = %d\nhead_segment = %d\nname = %s\n"
           "nblocks = %d\nnsegs = %d\n",
           blk->id,
           blk->head_segment,
           blk->name,
           blk->nblocks,
           blk->nsegs);
}
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_blk(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_blk(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_block blk;
    unsigned int id;
    int err;
    int prog;

    prog = 0;
    err = 0;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID [prog]\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    wmp_block_init(&blk);
    id = atoi(argv[1]);

    if (argc > 2) prog = atoi(argv[2]);

    rc = wmp_find_block(&core, id, &blk, prog);

    if(!rc) {
        fprintf(stderr,
                "Could not find block in program %d "
                "with id %d\n",
                prog,
                id);
        err = 1;
    } else {
        print_block(&blk);
    }
    wmp_block_free(&blk);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "blk", 3)) {
    argv++;
    argc--;
    get_blk(argc, argv);
}
#+END_SRC
* segment
The =segement= command will return information of a
particular segment, given it's UUID.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr,
        "seg: prints segment info given UUID\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_seg(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_seg(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_segment seg;
    unsigned int id;
    int err;
    int prog;

    prog = 0; /* TODO: make parameter */
    err = 0;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    wmp_segment_init(&seg);
    id = atoi(argv[1]);
    rc = wmp_find_segment(&core, id, &seg, prog);

    if(!rc) {
        fprintf(stderr,
                "Could not find segment with id %d\n",
                id);
        err = 1;
    } else {
        printf("id = %d\n", seg.id);
        printf("type = %d\n", seg.type);
        printf("str = \"\"\"\n%s\n\"\"\"\n", seg.str);
        printf("linum = %d\n", seg.linum);
        printf("file = \"%s\"\n", seg.filename);
        printf("next_segment = %d\n", seg.nxtseg);
    }
    wmp_segment_free(&seg);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "seg", 3)) {
    argv++;
    argc--;
    get_seg(argc, argv);
}
#+END_SRC
* Block Find (fblk)
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "fblk: looks up block given name\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_fblk(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_fblk(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_block blk;
    int err;
    int prog;

    err = 0;
    if (argc < 3) {
        fprintf(stderr, "Usage: %s NAME prog\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    wmp_block_init(&blk);

    prog = atoi(argv[2]);
    rc = wmp_lookup_block(&core, argv[1], &blk, prog);

    if(!rc) {
        fprintf(stderr,
                "Could not find block name '%s'\n",
                argv[1]);
        err = 1;
    } else {
        print_block(&blk);
    }
    wmp_block_free(&blk);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "fblk", 4)) {
    argv++;
    argc--;
    get_fblk(argc, argv);
}
#+END_SRC
* File
The =file= command will return information of a particular
file.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr,
        "file: prints file info given UUID\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_file(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_file(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_file file;
    unsigned int id;
    int err;
    int prog;

    err = 0;
    prog = 0;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID [prog]\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    wmp_file_init(&file);
    id = atoi(argv[1]);
    rc = wmp_find_file(&core, id, &file, prog);

    if(!rc) {
        fprintf(stderr,
                "Could not find file with id %d\n",
                id);
        err = 1;
    } else {
        printf("id = %d\n", file.id);
        printf("filename = %s\n", file.filename);
        printf("top = %d\n", file.top);
        printf("next_file = %d\n", file.next_file);
    }
    wmp_file_free(&file);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "file", 4)) {
    argv++;
    argc--;
    get_file(argc, argv);
}
#+END_SRC
* File Find (ffile)
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "ffind: looks up file given name\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_ffile(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_ffile(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_file file;
    int err;

    err = 0;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s NAME [prog]\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());

    if (!rc) return 0;

    wmp_file_init(&file);

    rc = wmp_lookup_file(&core, argv[1], &file);

    if (!rc) {
        fprintf(stderr,
                "Could not find file '%s'\n",
                argv[1]);
        err = 1;
    } else {
        wmp_block top;
        printf("id = %d\n", file.id);
        printf("filename = %s\n", file.filename);
        wmp_block_init(&top);
        rc = wmp_find_block(&core, file.top, &top, file.prog);
        if (rc) {
            printf("top = %d (%s)\n", file.top, top.name);
        } else {
            printf("top = %d\n", file.top);
        }
        printf("next_file = %d\n", file.next_file);
        printf("program id = %d\n", file.prog);
        wmp_block_free(&top);
    }
    wmp_file_free(&file);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "ffile", 5)) {
    argv++;
    argc--;
    get_ffile(argc, argv);
}
#+END_SRC
* Filelist
The =filelist= command will list all tangled files.

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "filelist: prints list of files\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_filelist(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int print_filelist(wmp_core *core, int prog)
{
    int rc;
    wmp_file f;

    wmp_file_init(&f);
    rc = wmp_file_top(core, &f, prog);

    if (!rc) {
        fprintf(stderr, "No files to be found!\n");
        return 1;
    }

    while (1) {
        int next;
        int id;

        printf("%s\n", f.filename);
        next = f.next_file;
        id = f.id;
        wmp_file_free(&f);
        wmp_file_init(&f);

        if (id == next || id == 0) {
            break;
        } else {
            rc = wmp_find_file(core, next, &f, prog);
            if (!rc) {
                wmp_file_free(&f);
                break;
            }
        }
    }

    return 0;
}

static int print_all_files(wmp_core *core)
{
    sqlite3 *db;
    sqlite3_stmt *stmt;
    int rc;
    int err;

    db = wmp_core_db(core);

    sqlite3_prepare_v2(db,
                       "SELECT DISTINCT program FROM files;",
                       -1,
                       &stmt,
                       NULL);
    err = 0;

    while (1) {
        rc = sqlite3_step(stmt);
        if (rc == SQLITE_DONE) {
            sqlite3_finalize(stmt);
            stmt = NULL;
            break;
        } else if (rc == SQLITE_ROW) {
            int prog;
            prog = sqlite3_column_int(stmt, 0);
            print_filelist(core, prog);
            err = 1;
        } else {
            fprintf(stderr,
                    "Error: %s\n",
                    sqlite3_errmsg(db));
            sqlite3_finalize(stmt);
            stmt = NULL;
            err = 0;
            break;
        }
    }

    if (stmt != NULL) {
        sqlite3_finalize(stmt);
    }

    return err;
}

static int get_filelist(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    int prog;

    prog = 0;
    rc = wmp_core_open(&core, wmp_filename_get());

    if (!rc) return 0;

    if (argc > 1) {
        prog = atoi(argv[1]);
        rc = print_filelist(&core, prog);
    } else {
        rc = print_all_files(&core);
    }

    wmp_core_close(&core);
    return rc;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "filelist", 8)) {
    argv++;
    argc--;
    get_filelist(argc, argv);
}
#+END_SRC
* Blocklist

Given a block name, print underlying blocks associated with
it.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "blklst: prints sub-blocks\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_blklst(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_blklst(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_segment s;
    wmp_block b;
    int next;
    int prog;

    prog = 0; /* TODO: make parameter */
    if (argc < 2) {
        fprintf(stderr, "Usage: %s NAME\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    wmp_block_init(&b);
    rc = wmp_lookup_block(&core, argv[1], &b, prog);
    if (!rc) {
        fprintf(stderr,
                "Could not find block '%s'",
                argv[1]);
        return 1;
    }
    wmp_segment_init(&s);
    wmp_find_segment(&core, b.head_segment, &s, prog);

    while (1) {
        next = s.nxtseg;
        if (s.id == next || s.id <= 0) {
            wmp_segment_free(&s);
            break;
        }

        if (s.type == 1) {
            printf("%s\n", s.str);
        }

        wmp_segment_free(&s);
        wmp_segment_init(&s);
        wmp_find_segment(&core, next, &s, prog);
    }
    wmp_block_free(&b);
    wmp_core_close(&core);
    return 0;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "blklst", 6)) {
    argv++;
    argc--;
    get_blklst(argc, argv);
}
#+END_SRC
* Tree
Like =blklist=, only recursively prints blocks

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "tree: recursively print sub blocks\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_tree(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static void print_tree(wmp_core *c,
                       const char *name,
                       int level,
                       int prog)
{
    wmp_segment s;
    wmp_block b;
    int next;
    int n;
    int rc;

    wmp_block_init(&b);
    rc = wmp_lookup_block(c, name, &b, prog);
    if (!rc) {
        fprintf(stderr,
                "Could not find block '%s'",
                name);
        return;
    }
    wmp_segment_init(&s);
    wmp_find_segment(c, b.head_segment, &s, prog);

    while (1) {
        next = s.nxtseg;
        if (s.id == next || s.id <= 0) {
            wmp_segment_free(&s);
            break;
        }

        if (s.type == 1) {
            for(n = 0; n < level; n++) printf(" ");
            printf("%s\n", s.str);
            print_tree(c, s.str, level + 1, prog);
        }

        wmp_segment_free(&s);
        wmp_segment_init(&s);
        wmp_find_segment(c, next, &s, prog);
    }
    wmp_block_free(&b);
}

static int get_tree(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    int prog;

    if (argc < 3) {
        fprintf(stderr, "Usage: %s NAME program_id\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    prog = atoi(argv[2]);
    print_tree(&core, argv[1], 0, prog);
    wmp_core_close(&core);
    return 0;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "tree", 4)) {
    argv++;
    argc--;
    get_tree(argc, argv);
}
#+END_SRC
* Block Reference (blkref)
Given a block name and program ID, return metadata
information about the block, such as file, line number, and
section it belongs to.

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "blkref: prints info about block\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_blkref(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_blkref(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    int prog;
    sqlite3_stmt *stmt;
    wmp_blkref br;
    const char *name;

    if (argc < 3) {
        fprintf(stderr, "Usage: %s NAME program_id\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    prog = atoi(argv[2]);
    name = argv[1];

    wmp_blkref_init(&br);

    rc = wmp_blkref_lookup_setup(&core, name, prog, &stmt);

    if (!rc) {
        fprintf(stderr,
                "Could not find block '%s' in program %d\n",
                name,
                prog);
    }

    while (1) {
        rc = wmp_blkref_lookup_step(&core, stmt, &br);
        if (!rc) break;
        printf("%s:%d\n",
               br.filename,
               br.linum);
    }

    wmp_core_close(&core);
    return 0;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "blkref", 6)) {
    argv++;
    argc--;
    get_blkref(argc, argv);
}
#+END_SRC
* Block Search (blksearch)
Find a block with a name.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "blksearch: finds a block with a name.\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_blksearch(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_blksearch(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    sqlite3_stmt *stmt;
    wmp_block blk;
    const char *name;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s NAME\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    name = argv[1];

    wmp_block_init(&blk);
    wmp_blksearch_setup(&core, name, &stmt);

    while (1) {
        rc = wmp_blksearch_step(&core, stmt, &blk);
        if (!rc) break;
        printf("%s:prog=%d:id=%d\n",
               blk.name,
               blk.prog,
               blk.id);
    }

    wmp_core_close(&core);
    return 0;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "blksearch", 9)) {
    argv++;
    argc--;
    get_blksearch(argc, argv);
}
#+END_SRC
* Header
Prints header information, given an id.

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "header: prints header info given UUID\n");
#+END_SRC

#+NAME: utils
#+BEGIN_SRC c
static void print_header(wmp_header *h)
{
    printf("prog = %d\n", h->prog);
    printf("id = %d\n", h->id);
    printf("section = %s\n", h->section);
    printf("level = %d\n", h->level);
    printf("name = %s\n", h->name);
    printf("filename = %s\n", h->filename);
    printf("linum = %d\n", h->linum);
    printf("next = %d\n", h->next);
}
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_header(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_header(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_header h;
    unsigned int id;
    int err;
    int prog;

    prog = 0;
    err = 0;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID [prog]\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    wmp_header_init(&h);
    id = atoi(argv[1]);

    if (argc > 2) prog = atoi(argv[2]);

    rc = wmp_header_find(&core, id, &h, prog);

    if(!rc) {
        fprintf(stderr,
                "Could not find block in program %d "
                "with id %d\n",
                prog,
                id);
        err = 1;
    } else {
        print_header(&h);
    }

    wmp_header_free(&h);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "header", 6)) {
    argv++;
    argc--;
    get_header(argc, argv);
}
#+END_SRC
* Content
Gets content information, given an id.

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "content: prints content info given UUID\n");
#+END_SRC

#+NAME: utils
#+BEGIN_SRC c
static void print_content(wmp_content *c)
{
    printf("prog = %d\n", c->prog);
    printf("id = %d\n", c->id);
    printf("section = %s\n", c->section);
    printf("filename = %s\n", c->filename);
    printf("linum = %d\n", c->linum);
    printf("content = @@\n%s\n@@\n", c->content);
    printf("next = %d\n", c->next);
}
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_content(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_content(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_content c;
    unsigned int id;
    int err;
    int prog;

    prog = 0;
    err = 0;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID [prog]\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());

    if (!rc) return 0;

    wmp_content_init(&c);
    id = atoi(argv[1]);

    if (argc > 2) prog = atoi(argv[2]);

    rc = wmp_content_find(&core, id, &c, prog);

    if (!rc) {
        fprintf(stderr,
                "Could not find block in program %d "
                "with id %d\n",
                prog,
                id);
        err = 1;
    } else {
        print_content(&c);
    }

    wmp_content_free(&c);
    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "content", 7)) {
    argv++;
    argc--;
    get_content(argc, argv);
}
#+END_SRC
* TODO TOC
Prints table of contents of a program.
* TODO Org
Prints Org markup, given a reference id of a section.
