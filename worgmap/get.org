* Get
The "get" interface is a small test program used to test out
some of the core SQLite querying routines supplied by
worgmap.

** TODO Tangled Files
#+NAME: get.c
#+BEGIN_SRC c :tangle get.c
#include <stdio.h>
#include <string.h>
#include <sqlite3.h>
#include <stdlib.h>
#include "core.h"
#include "core_private.h"
<<function_declarations>>
<<functions>>
#+END_SRC
** TODO The main program
The main program is contained in a function called
=get_main=, taking in =argc= and =argv= parameters.
#+NAME: function_declarations
#+BEGIN_SRC c
int p_get(int argc, char *argv[]);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
int p_get(int argc, char *argv[])
{
    if(argc < 2) {
        print_help();
        return 1;
    }
    <<command_parsing>>
    return 0;
}
#+END_SRC
*** Print Help
Prints all available commands if there are not enough
arguments provided.
#+NAME: function_declarations
#+BEGIN_SRC c
static void print_help(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void print_help(void)
{
    fprintf(stderr, "Available Commands\n\n");
    <<available_commands>>
}
#+END_SRC
*** Sub Commands
** TODO res
The =res= command will return the information of
a particular resource, given a UUID.
#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "res: prints resource info given UUID\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int get_res(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int get_res(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_resource res;
    unsigned int id;
    int err;

    err = 0;
    if (argc < 2) {
        fprintf(stderr, "Usage: %s UUID\n", argv[0]);
        return 1;
    }
    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    id = atoi(argv[1]);
    rc = wmp_find_resource(&core, id, &res);

    if(!rc) {
        fprintf(stderr,
                "Could not find resource with id %d\n",
                id);
    } else {
        printf("%d %d %s\n",
               res.id,
               res.type,
               wmp_resource_typestring(&res));
    }

    wmp_core_close(&core);
    return err;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (!strncmp(argv[1], "res", 3)) {
    argv++;
    argc--;
    get_res(argc, argv);
}
#+END_SRC
** TODO block
The =block= command will return the information of
block with a particular UUID.
** TODO segment
The =segement= command will return information of a
particular segment, given it's UUID.
** TODO file
The =file= command will return information of a particular
file.
** TODO filelist
The =filelist= command will list all tanlged files.
** TODO tangle
The =tangle= command is used to tangle together
blocks or files
*** TODO File
Will look up a particular file name, and then
iteratively tangle it.
*** TODO Block
Will look up a particular named block, and then print
the output to the screen.
** TODO blocktree
The =tree= command will take in a named block, and
print out the underlying blocks that make it as a
tree structure.
