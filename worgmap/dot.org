#+TITLE: Dot
Utility to generate directional dot graphs.
* DONE Tangled Files
CLOSED: [2019-12-15 Sun 17:56]
#+NAME: dot.c
#+BEGIN_SRC c :tangle dot.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlite3.h>
#include "core.h"
#include "core_private.h"
<<function_declarations>>
<<functions>>
#+END_SRC
* The main program
** Main subroutine
#+NAME: function_declarations
#+BEGIN_SRC c
int p_dot(int argc, char *argv[]);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
int p_dot(int argc, char *argv[])
{
    int len;
    if(argc < 2) {
        print_help();
        return 1;
    }
    len = strlen(argv[1]);
    if(0) {
        /* hack to start the chain */
    }
    <<command_parsing>>
    else {
        fprintf(stderr,
                "Could not find subcommand '%s'\n",
                argv[1]);
        return 1;
    }
    return 0;
}
#+END_SRC
** Print Help
Prints all available commands if there are not enough
arguments provided.
#+NAME: function_declarations
#+BEGIN_SRC c
static void print_help(void);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static void print_help(void)
{
    fprintf(stderr, "Available Commands\n\n");
    <<available_commands>>
}
#+END_SRC
** Matching
(Copied from get.org)
#+NAME: function_declarations
#+BEGIN_SRC c
static int match(const char *s1,
                 int sz1,
                 const char *s2,
                 int sz2);
#+END_SRC
#+NAME: functions
#+BEGIN_SRC c
static int match(const char *s1,
                 int sz1,
                 const char *s2,
                 int sz2)
{
    return sz1 == sz2 && !strncmp(s1, s2, sz2);
}
#+END_SRC
* DONE Block
CLOSED: [2019-11-14 Thu 17:56]
Creates a graph from a block.

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "block: Creates graph from named block.\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int dot_block(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static void print_tree(wmp_core *c, const char *name, int level)
{
    wmp_segment s;
    wmp_block b;
    int next;
    int rc;

    wmp_block_init(&b);
    rc = wmp_lookup_block(c, name, &b);
    if (!rc) {
        fprintf(stderr,
                "Could not find block '%s'",
                name);
        return;
    }
    wmp_segment_init(&s);
    wmp_find_segment(c, b.head_segment, &s);

    while (1) {
        next = s.nxtseg;
        if (s.id == next || s.id <= 0) {
            wmp_segment_free(&s);
            break;
        }

        if (s.type == 1) {
            printf("\"%s\"->\"%s\"\n", name, s.str);
            print_tree(c, s.str, level + 1);
        }

        wmp_segment_free(&s);
        wmp_segment_init(&s);
        wmp_find_segment(c, next, &s);
    }
    wmp_block_free(&b);
}

static int dot_block(int argc, char *argv[])
{
    wmp_core core;
    int rc;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s NAME\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;
    printf("digraph {\n");
    print_tree(&core, argv[1], 0);
    printf("}\n");
    wmp_core_close(&core);
    return 0;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "block", 5)) {
    argv++;
    argc--;
    dot_block(argc, argv);
}
#+END_SRC
* DONE File
CLOSED: [2019-11-14 Thu 18:19]
Creates a graph given, a filename.

#+NAME: available_commands
#+BEGIN_SRC c
fprintf(stderr, "file: Creates graph from file.\n");
#+END_SRC

#+NAME: function_declarations
#+BEGIN_SRC c
static int dot_file(int argc, char *argv[]);
#+END_SRC

#+NAME: functions
#+BEGIN_SRC c
static int dot_file(int argc, char *argv[])
{
    wmp_core core;
    int rc;
    wmp_file file;
    wmp_block blk;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s FILE [prog]\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;

    wmp_file_init(&file);

    rc = wmp_lookup_file(&core, argv[1], &file);

    if (!rc) {
        printf("Could not find file %s\n", argv[1]);
        return 1;
    }

    wmp_block_init(&blk);
    rc = wmp_find_block(&core, file.top, &blk, 0);

    if (!rc) {
        printf("Could not find block with id %d\n", file.id);
        return 1;
    }

    printf("digraph {\n");
    print_tree(&core, blk.name, 0);
    printf("}\n");

    wmp_file_free(&file);
    wmp_core_close(&core);
    return 0;
}
#+END_SRC

#+NAME: command_parsing
#+BEGIN_SRC c
else if (match(argv[1], len, "file", 4)) {
    argv++;
    argc--;
    dot_file(argc, argv);
}
#+END_SRC
