#+TITLE: WeeWiki
* Brain Storming
A work in progress idea...

The gist of this is to take a worgle program and export it
to a weewiki. From there, the weewiki can export the content
to HTML. Supplementary pages can also be added and linked.

My core thinking is to be able to export every major header
to it's own page. It will have the name format =wm_PROG_ID=,
where =PROG= is the program number, and =ID= is the resource
ID.

Every program generates a table of contents. It has the name
=wm_PROG_toc= where =PROG= is the program id.

Worgmap will write stuff to a file that is supplied. It
could be the worgmap db, but not necessarily.

In addition to appending stuff to the "wiki" table, a
reference table called =wm_ref= will be created, which links
worgmap page names to resource + program ids. Even though
this is information could be parsed in the page name, this
is a bit cleaner.

In order for this to work, worgmap must be able to
dynamically recreate org code, given a section (or resource
id of a section). This functionality will be implemented in
worgmap core.

Generating an org file is a a piecemeal operation. It is
created by stringing together a bunch headers, content, and
codeblocks to a string.

When worgle generates the database, it recreates the headers
and subheaders to include their section number.

Given a block reference, a code sub block can be printed.
Eventually, all references will have links to a special
generated codeblock page.
* Tangled Files
#+NAME: weewiki.c
#+BEGIN_SRC c :tangle weewiki.c
#include <stdio.h>
#include <string.h>
#include <sqlite3.h>
#include <stdlib.h>
#include "core.h"
#include "core_private.h"
<<string_management>>
<<functions>>
#+END_SRC
* Top Level Function
#+NAME: functions
#+BEGIN_SRC c
<<helper_functions>>
int p_weewiki(int argc, char *argv[])
{
    sqlite3 *wiki;
    wmp_core core;
    int rc;
    unsigned int id;
    unsigned int next;
    int prog;
    unsigned int last;
    wwstring str;
    int err;
    unsigned int prev_header_id;
    int page_id;

    fprintf(stderr, "To be implemented later.\n");

    err = 0;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s program [db]\n", argv[0]);
        return 1;
    }

    rc = wmp_core_open(&core, wmp_filename_get());
    if (!rc) return 0;

    prog = atoi(argv[1]);
    wwstring_init(&str);
    prev_header_id = 0;
    page_id = 0;

    next = 0;

    <<open_the_db>>
    <<clear_and_reset>>
    <<page_generation>>
    <<close_the_db>>

    cleanup:
    wwstring_free(&str);
    wmp_core_close(&core);
    return err;
}
#+END_SRC
* Opening/Closing the database
If no filename is provided, the weewiki database is used.
Otherwise, a new SQLite database is opened.

#+NAME: open_the_db
#+BEGIN_SRC c
if (argc == 2) {
    wiki = wmp_core_db(&core);
} else {
    rc = sqlite3_open(argv[2], &wiki);
    if (rc) {
        fprintf(stderr,
                "Could not open database: %s",
                sqlite3_errmsg(wiki));
        sqlite3_close(wiki);
        return 0;
    }
}
#+END_SRC

At the end, this SQLite database is closed. If it's the same
as the database (the same pointer), this does not happen.

#+NAME: close_the_db
#+BEGIN_SRC c
if (wiki != wmp_core_db(&core)) {
    printf("closing...\n");
    sqlite3_close(wiki);
    wiki = NULL;
}
#+END_SRC
* Clearing + reset the weewiki tables
#+NAME: clear_and_reset
#+BEGIN_SRC c
<<create_wiki_table>>
<<create_wmref_table>>
#+END_SRC
** Wiki
Create this table if it doesn't already exist.
#+NAME: create_wiki_table
#+BEGIN_SRC c
sqlite3_exec(wiki,
             "DROP TABLE IF EXISTS wikilinks;"
             "DROP TABLE IF EXISTS wiki;"
             "CREATE TABLE "
             "wiki(key TEXT UNIQUE, value TEXT);",
             NULL,
             NULL,
             NULL);
#+END_SRC
Remove all rows with the prefix =wm_=.
** wmref
This links wiki names with program and resource ideas.
Create the table if doesn't exist, and clear any
pre-existing rows.
#+NAME: create_wmref_table
#+BEGIN_SRC c
sqlite3_exec(wiki,
             "DROP TABLE IF EXISTS wmref;"
             "CREATE TABLE "
             "wmref(key TEXT UNIQUE, "
             "program INTEGER, "
             "id INTEGER);",
             NULL,
             NULL,
             NULL);
#+END_SRC
* Generation
This section refers to the core wiki page generation.

Every weewiki page generated corresponds to a top-level
header.

For simplification purposes, a program in this context is
considered to be a collection of top-level headers.
If there are no level 1 headers, no pages are created.
Any text that occurs before the first header will be skipped.

Page generation is a matter of getting the top-level id, and
then iterating through all the individual components until
it reaches the end. Along the way, it is determined where
major sections start and end, and pages are broken up and
generated accordingly.

#+NAME: page_generation
#+BEGIN_SRC c
<<find_first_id>>
<<find_last_id>>
<<iterate_through_components>>
#+END_SRC

The first header in the program needs to be found. This is
the header with the smallest reference ID.

This can be found with =wmp_header_top=.

#+NAME: find_first_id
#+BEGIN_SRC c
id = wmp_header_top(&core, NULL, prog);
page_id = id;
#+END_SRC

The last id of the program is found. When this resource
is reached, the program willl break. This is found with
the function =wmp_resource_last=.

#+NAME: find_last_id
#+BEGIN_SRC c
last = wmp_resource_last(&core, NULL, prog);
printf("last ID is %d\n", last);
#+END_SRC

Org code gets rendered by iterating through headers,
content, and block references.

#+NAME: iterate_through_components
#+BEGIN_SRC c
while (1) {
    wmp_resource res;
    <<get_type>>
    <<handle_component>>
    <<check_for_last>>
    <<update_id>>
}
<<flush_last_page>>
#+END_SRC

These components are
connected together as a linked list. Every one of these
components has a "next" value, containing the reference ID
of the next object.

Iteration through the list will continue to happen until
the last ID is found. There, it will break the loop.

#+NAME: check_for_last
#+BEGIN_SRC c
if (id >= last) break;
#+END_SRC

The =next= value is presumably found from one of the
components, it is updated at the end of the loop.

#+NAME: update_id
#+BEGIN_SRC c
if (next == 0) {
    printf("next id is 0, coming from %d\n", id);
}
id = next;
#+END_SRC

The type of the reference ID is determined, and then the
information is extracted from the right table.

#+NAME: get_type
#+BEGIN_SRC c
wmp_resource_init(&res);
rc = wmp_find_resource(&core, id, &res, prog);

if (!rc) {
    fprintf(stderr, "Could not find resource %d\n", id);
    err = 1;
    goto cleanup;
}
#+END_SRC

Content gets appended to the working string in different
ways depending on the type. There are three major types
to consider: content data, headers, and code blocks.

For now: headers, content, and block references are hard
coded as integers 3, 4, 5 (as seen in the enum defined
in db.org). A less brittle solution will perhaps someday be
implemented.

#+NAME: handle_component
#+BEGIN_SRC c
switch (res.type) {
    case 3:
        <<append_header>>
        break;
    case 4:
        <<append_content>>
        break;
    case 5:
        <<append_block>>
        break;
    default:
        fprintf(stderr, "Not sure how to handle type %d\n",
                res.type);
        err = 1;
        goto cleanup;
}
#+END_SRC

Components get appended onto the end of a string as org
code.

For content, it's a matter of appending the text
as-is. This is the most straightforward.

#+NAME: append_content
#+BEGIN_SRC c
{
    wmp_content ct;
    rc = wmp_content_find(&core, id, &ct, prog);

    if (!rc) {
        fprintf(stderr,
                "Could not find content %d in program %d\n",
                id,
                prog);
        err = 1;
        goto cleanup;
    }

    wwstring_append(&str, ct.content, strlen(ct.content));
    next = ct.next;
    wmp_content_free(&ct);
}
#+END_SRC

Headers require some processing. First, the header level is
applied (the number of stars). Following that, the
dynamically generated section number. Finally, the actual
name itself is appended.

#+NAME: append_header
#+BEGIN_SRC c
{
    wmp_header hd;
    char tmp[16]; /* hope 16 levels is enough heh */
    int i;
    int level;
    rc = wmp_header_find(&core, id, &hd, prog);

    if (!rc) {
        fprintf(stderr,
                "Could not find content %d in program %d\n",
                id,
                prog);
    }

    <<check_for_new_section>>

    if (hd.level >= 14) level = 14;
    else level = hd.level;

    for (i = 0; i < hd.level; i++) {
        tmp[i] = '*';
    }

    tmp[level] = ' ';
    tmp[level + 1] = '\0';

    wwstring_append(&str, tmp, level + 1);
    wwstring_append(&str, hd.section, strlen(hd.section));
    wwstring_append(&str, " ", 1);
    wwstring_append(&str, hd.name, strlen(hd.name));
    wwstring_append(&str, "\n", 1);

    next = hd.next;
    prev_header_id = hd.id;
    wmp_header_free(&hd);
}
#+END_SRC

Markers are referenced using inline janet function called
=marker=. This creates an id reference that jump links can
use.

A header marker generated with the format
=wm_PROG_ID= where =PROG= is the program number, and
=ID= is the reference id.

Generating code blocks is where things start to get
interesting. A code block first pops up as a block
reference, and is used to make a marker with the name
=wm_PROG_ID=. From the block reference, the code block
itself can be extracted. The subblock can then be recreated
using the =pos=, =ref=, =prev_lastseg=, and =segoff=
values.

A code subblock is a chain of segments. that gets written
inside of a subblock. Segments are either piece of text,
or block references. Block references will eventually turn
into hyperlinks that go to a block page. For now, they
will be represented in text form.

The first thing supplied here is a block reference. From the
block reference, the actual named code block can be
retrieved. This is found using =wmp_blkref_codeblock=, which
returns the subblock as a list of segments.

#+NAME: append_block
#+BEGIN_SRC c
{
    wmp_blkref br;
    wmp_segment *segs;
    int nsegs;
    wmp_block blk;
    int k;

    nsegs = 0;
    wmp_blkref_init(&br);

    wmp_blkref_find(&core, id, &br, prog);
    wmp_block_init(&blk);
    wmp_find_block(&core, br.ref, &blk, prog);
    wmp_blkref_codeblock(&core, &br, &segs, &nsegs);

    wwstring_append(&str, "#+NAME: ", 8);
    wwstring_append(&str, blk.name, strlen(blk.name));
    wwstring_append(&str, "\n", 1);
    wwstring_append(&str, "#+BEGIN_SRC c", 13);
    wwstring_append(&str, "\n", 1);
    for (k = 0; k < nsegs; k++) {
        if (segs[k].type == 0) {
            wwstring_append(&str, segs[k].str, strlen(segs[k].str));
        } else if (segs[k].type == 1) {
            wwstring_append(&str, "<<", 2);
            wwstring_append(&str, segs[k].str, strlen(segs[k].str));
            wwstring_append(&str, ">>", 2);
            wwstring_append(&str, "\n", 1);
        }
    }
    wwstring_append(&str, "#+END_SRC", 9);
    wwstring_append(&str, "\n", 1);

    next = br.next;
    wmp_blkref_free(&br);
    wmp_block_free(&blk);
    wmp_blkref_codeblock_free(&core, &segs, nsegs);
}
#+END_SRC

A check is done to see if a page needs to be written. A new
page can be written when a new major section is found (this
will probably be set with some sort of flag).

#+NAME: check_for_new_section
#+BEGIN_SRC c
if (hd.level == 1 && prev_header_id > 0) {
    <<create_new_wikipage>>
    wwstring_free(&str);
    wwstring_init(&str);
    page_id = hd.id;
}
#+END_SRC

Creating a new weewiki is a matter of inserting a new row
into the =wiki= table. A unique page name is created with
the format =WM_PROG_ID= where =PROG= is the program ID, and
=ID= is the resource ID associated with the top-level
header.

#+NAME: generate_page_name
#+BEGIN_SRC c
sprintf(pgname, "wm_%03d_%04d", prog, page_id);
#+END_SRC

The data for page content itself is stored in a string that
has been appended to since the last page was created.

The key/value pair for an operation is written via a SQL
=INSERT= operation via the SQLite API.

#+NAME: sql_insert_operation
#+BEGIN_SRC c
{
    sqlite3_stmt *stmt;
    int rc;

    sqlite3_prepare_v2(wiki,
                       "INSERT INTO wiki"
                       "(key, value)\n"
                       "VALUES(?1, ?2);",
                       -1,
                       &stmt,
                       NULL);
    sqlite3_bind_text(stmt, 1, pgname, -1, NULL);
    sqlite3_bind_text(stmt, 2, str->str, -1, NULL);
    rc = sqlite3_step(stmt);
    if (rc != SQLITE_DONE) {
        sqlite3_finalize(stmt);
        fprintf(stderr, "Error: %s\n", sqlite3_errmsg(wiki));
        err = 1;
    }
    sqlite3_finalize(stmt);
}
#+END_SRC


#+NAME: create_new_wikipage
#+BEGIN_SRC c
rc = create_new_wikipage(wiki, prog, page_id, &str);
if (rc) {
    err = 1;
    goto cleanup;
}
#+END_SRC

A function called =create_new_wikipage= will create a new
weewiki page given the database, program, page id, and
content stored in a =wwstring=. This is needed as a function
because it is called in more than one place.

#+NAME: helper_functions
#+BEGIN_SRC c
static int create_new_wikipage(sqlite3 *wiki,
                               int prog,
                               int page_id,
                               wwstring *str)
{
    char pgname[16]; /* wm_XXX_XXXX */
    int err;
    err = 0;
    <<generate_page_name>>
    <<sql_insert_operation>>
    return err;
}
#+END_SRC

At the end of the parsing, the last page must be written to
disk, if there is a last page. Prior to this, the only way
a new wiki page would be written was when a new major
section occured. No more major sections following means this
page would otherwise be stick in limbo.

#+NAME: flush_last_page
#+BEGIN_SRC c
if (prev_header_id > 0 && str.sz > 0) {
    rc = create_new_wikipage(wiki, prog, page_id, &str);

    if (rc) {
        err = 1;
        goto cleanup;
    }
}
#+END_SRC
* Meta Page Generation
Metapages are pages that are dynamically generated using
SQL queries. These include a table of contents, a block
tree, and block pages.

A table of contents page generates a list of links for all
the sections and subsections. Each section links to a page,
and every subsection links to it's major section page with
a jump link.

Indentation will easier visibility, however the HTML will
be abstracted away into inline janet functions, should this
code ever want to be exported to a non-HTML format someday.
This is TBD.

A block tree is like a table of contents, but it outlines
the code block hierachy in the program structure. Each of
these blocks link to block pages.

Block pages give meta information about each block and where
they are located. This will include links to every subblock.
* Inserting Pages
Inserting a page involves two INSERT statements: one for
the main =wiki= table, and other for the =wm_ref= table.

Three parameters are needed to insert a page: the page name,
the content, and the id.

The =wiki= table uses both the content and and the name. The
=wm_ref= table uses the id and the name.
* String Management
Content gets dynamically appended onto a new string in
memory, before being saved as content to a weewiki page.

#+NAME: string_management
#+BEGIN_SRC c
<<string_constants>>
<<string_struct>>
<<string_funcs>>
#+END_SRC

An interface needs to be built to handle this. Strings need
to dynamically grow when needed (shrinking not needed at
the moment), and it needs to be trivial to append stuff
to the end of the string as well. Something simple and
fast. Just something that re-allocs stuff under the hood.

The main struct consists of a string pointer, it's current
size, and the total capacity.

#+NAME: string_struct
#+BEGIN_SRC c
typedef struct {
   char *str;
   size_t sz;
   size_t cap;
} wwstring;
#+END_SRC

When the string is initialized, everything is zeroed out.

#+NAME: string_funcs
#+BEGIN_SRC c
static void wwstring_init(wwstring *s)
{
    s->str = NULL;
    s->sz = 0;
    s->cap = 1;
}
#+END_SRC

The internal string grows by getting stuff appended to it.
Arguments supplied must be the content to appended (duh),
as well as the size of the content.

Before copying (memmove-ing?) the content over, the string
must be checked if it has enough capacity for it. If not,
the capacity will keep doubling until it is greater than
the needed capacity. Either that, or the capacity reaches
some built-in max. At which point, and error is returned.

Speaking of max capacity, that's a constant defined! A value
of 131072 (2^17) *should* be plenty while still being modest
on modern hardware.

#+NAME: string_constants
#+BEGIN_SRC c
#define WWSTRING_MAX 131072
#+END_SRC

An initialized string starts at 0, which means that no
memory has actually been allocated yet. The initial
allocation starts at 8, and doubles from there.

None of the sizes/capacities include the null
terminator, so malloc/realloc makes up for this by
allocating capacity + 1.

#+NAME: string_resize
#+BEGIN_SRC c
while (s->cap < new_sz) {
    if (s->cap == 0) {
        s->cap = 8;
        s->str = malloc(s->cap + 1);
    } else {
        s->cap *= 2;
        s->str = realloc(s->str, s->cap + 1);
    }
}
#+END_SRC

Since there is a hard coded max, some work needs to be
done to ensure that the new string does go over the size.
If this does happen, only part of the string gets appended.

#+NAME: check_limits
#+BEGIN_SRC c
if (new_sz > WWSTRING_MAX) {
    sz = WWSTRING_MAX - s->sz;
    new_sz = WWSTRING_MAX;
}
#+END_SRC

String copying is done with =memmove=, which is a little
bit more straight forward than =memcpy= and is less prone
to undefined behavior.

The string starts copying over stuff where the previous size
=sz= is. (I initially wasn't entirely sure this was
corrrect, so I had to double check with a test; When =sz= is
0, =str[0]= is correctly at the beginning of the string.)

#+NAME: copy_string_over
#+BEGIN_SRC c
memmove(&s->str[s->sz], txt, sz);
s->str[new_sz] = '\0'; /* don't forget the null terminator */
#+END_SRC

At the end of it all, update the size of string to be
=new_sz=.

#+NAME: update_size
#+BEGIN_SRC c
s->sz = new_sz;
#+END_SRC

#+NAME: string_funcs
#+BEGIN_SRC c
static void wwstring_append(wwstring *s,
                            const char *txt,
                            size_t sz)
{
    size_t new_sz;

    if (s->sz >= WWSTRING_MAX) return;

    new_sz = s->sz + sz;

    <<check_limits>>

    if (new_sz > s->cap) {
        <<string_resize>>
    }

    <<copy_string_over>>

    <<update_size>>
}
#+END_SRC

Freeing a string is done with =wwstring_free=. This function
will ignore =cap= and =sz=, and only check and see if
the string itself is =NULL= or not. The string gets
reinitialized as a precautionary measure. Doing this
should help to avoid things like double frees and
out-of-bounds errors.

#+NAME: string_funcs
#+BEGIN_SRC c
static void wwstring_free(wwstring *s)
{
    if (s->str != NULL) free(s->str);
}
#+END_SRC
